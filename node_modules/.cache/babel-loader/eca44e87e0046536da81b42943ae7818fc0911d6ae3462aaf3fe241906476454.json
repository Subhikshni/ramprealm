{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\n\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    // If the player selects black, flip the board orientation\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n\n    // If the player selects black, make the bot's first move\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    // Implement bot move logic based on the selected difficulty\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    chess.move(move);\n    setFen(chess.fen());\n    updateMoveHistory();\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n  };\n  const handleDrop = move => {\n    // Check if the source square and target square are the same\n    if (move.sourceSquare === move.targetSquare) return;\n\n    // Log current FEN string\n    console.log(\"Current FEN:\", fen);\n\n    // Validate player move\n    const moveResult = chess.move({\n      from: move.sourceSquare,\n      to: move.targetSquare,\n      promotion: \"q\" // promote to queen for simplicity\n    });\n\n    // If move is valid, make bot move\n    if (moveResult) {\n      setFen(chess.fen());\n      updateMoveHistory();\n      setTimeout(makeBotMove, 500); // Delay for better visualization\n    } else {\n      // Show invalid move pop-up\n      setShowInvalidMovePopup(true);\n      return \"snapback\"; // Snap back the piece if move is invalid\n    }\n  };\n  const getMediumMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getHardMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, prioritize controlling the center\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\n    const centerMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return centerSquares.includes(move.to);\n    });\n    if (centerMoves.length > 0) {\n      return getRandomMoveFromList(centerMoves);\n    }\n\n    // If no center moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getRandomMoveFromList = movesList => {\n    return movesList[Math.floor(Math.random() * movesList.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: playerColor,\n              onChange: handlePlayerColorChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"white\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: difficulty,\n              onChange: handleDifficultyChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"easy\",\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"medium\",\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hard\",\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          orientation: orientation // Pass orientation as a prop to Chessboard\n          ,\n          onSquareClick: square => {\n            // If it's not the player's turn or the player color doesn't match the turn, return\n            if (chess.turn() !== playerColor[0]) return;\n            const moves = chess.moves({\n              square: square\n            });\n\n            // If there are no possible moves for the clicked square, return\n            if (moves.length === 0) return;\n\n            // Perform the move\n            const move = moves[0];\n            chess.move(move);\n            setFen(chess.fen());\n            updateMoveHistory();\n            setTimeout(makeBotMove, 500); // Delay for better visualization\n          },\n          onDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-move-popup\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: handleInvalidMovePopupClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid move. Please try again.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"zfTIY9dS8lM/yQ0C5X7BVnHePdc=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","move","getRandomMove","getMediumMove","getHardMove","updateMoveHistory","possibleMoves","moves","Math","floor","random","length","handleDrop","sourceSquare","targetSquare","console","log","moveResult","from","to","promotion","setTimeout","captureMoves","verbose","filter","captured","getRandomMoveFromList","centerSquares","centerMoves","includes","movesList","handleInvalidMovePopupClose","history","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","square","turn","onDrop","onClick","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\r\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    // If the player selects black, flip the board orientation\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    // If the player selects black, make the bot's first move\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    // Implement bot move logic based on the selected difficulty\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    chess.move(move);\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n  };\r\n\r\n  const handleDrop = (move) => {\r\n    // Check if the source square and target square are the same\r\n    if (move.sourceSquare === move.targetSquare) return;\r\n\r\n    // Log current FEN string\r\n    console.log(\"Current FEN:\", fen);\r\n\r\n    // Validate player move\r\n    const moveResult = chess.move({\r\n      from: move.sourceSquare,\r\n      to: move.targetSquare,\r\n      promotion: \"q\", // promote to queen for simplicity\r\n    });\r\n\r\n    // If move is valid, make bot move\r\n    if (moveResult) {\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      setTimeout(makeBotMove, 500); // Delay for better visualization\r\n    } else {\r\n      // Show invalid move pop-up\r\n      setShowInvalidMovePopup(true);\r\n      return \"snapback\"; // Snap back the piece if move is invalid\r\n    }\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, prioritize controlling the center\r\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\r\n    const centerMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return centerSquares.includes(move.to);\r\n    });\r\n    if (centerMoves.length > 0) {\r\n      return getRandomMoveFromList(centerMoves);\r\n    }\r\n\r\n    // If no center moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getRandomMoveFromList = (movesList) => {\r\n    return movesList[Math.floor(Math.random() * movesList.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"select-box\">\r\n            <label>\r\n              Choose player color:\r\n              <select value={playerColor} onChange={handlePlayerColorChange}>\r\n                <option value=\"white\">White</option>\r\n                <option value=\"black\">Black</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Choose difficulty:\r\n              <select value={difficulty} onChange={handleDifficultyChange}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-container\">\r\n          <Chessboard\r\n            position={fen}\r\n            orientation={orientation} // Pass orientation as a prop to Chessboard\r\n            onSquareClick={(square) => {\r\n              // If it's not the player's turn or the player color doesn't match the turn, return\r\n              if (chess.turn() !== playerColor[0]) return;\r\n\r\n              const moves = chess.moves({ square: square });\r\n\r\n              // If there are no possible moves for the clicked square, return\r\n              if (moves.length === 0) return;\r\n\r\n              // Perform the move\r\n              const move = moves[0];\r\n              chess.move(move);\r\n              setFen(chess.fen());\r\n              updateMoveHistory();\r\n              setTimeout(makeBotMove, 500); // Delay for better visualization\r\n            }}\r\n            onDrop={handleDrop}\r\n          />\r\n          {showInvalidMovePopup && (\r\n            <div className=\"invalid-move-popup\">\r\n              <div className=\"popup-content\">\r\n                <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                  &times;\r\n                </span>\r\n                <p>Invalid move. Please try again.</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"move-history\">\r\n          <h3>Move History</h3>\r\n          <ul>\r\n            {moveHistory.map((move, index) => (\r\n              <li key={index}>\r\n                {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}