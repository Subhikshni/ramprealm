{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\n\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    // If the player selects black, flip the board orientation\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n\n    // If the player selects black, make the bot's first move\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    // Implement bot move logic based on the selected difficulty\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    chess.move(move);\n    setFen(chess.fen());\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n  };\n  const getMediumMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getHardMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, prioritize controlling the center\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\n    const centerMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return centerSquares.includes(move.to);\n    });\n    if (centerMoves.length > 0) {\n      return getRandomMoveFromList(centerMoves);\n    }\n\n    // If no center moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getRandomMoveFromList = movesList => {\n    return movesList[Math.floor(Math.random() * movesList.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: playerColor,\n            onChange: handlePlayerColorChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"white\",\n              children: \"White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"black\",\n              children: \"Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: difficulty,\n            onChange: handleDifficultyChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"easy\",\n              children: \"Easy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medium\",\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"hard\",\n              children: \"Hard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: fen,\n        orientation: orientation // Pass orientation as a prop to Chessboard\n        ,\n        onSquareClick: square => {\n          // If it's not the player's turn or the player color doesn't match the turn, return\n          if (chess.turn() !== playerColor[0]) return;\n          const moves = chess.moves({\n            square: square\n          });\n\n          // If there are no possible moves for the clicked square, return\n          if (moves.length === 0) return;\n\n          // Perform the move\n          const move = moves[0];\n          chess.move(move);\n          setFen(chess.fen());\n          setTimeout(makeBotMove, 500); // Delay for better visualization\n        },\n        onDrop: move => {\n          // Validate player move\n          const moveResult = chess.move({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\" // promote to queen for simplicity\n          });\n\n          // If move is valid, make bot move\n          if (moveResult) {\n            setFen(chess.fen());\n            setTimeout(makeBotMove, 500); // Delay for better visualization\n          } else {\n            // Show invalid move pop-up\n            setShowInvalidMovePopup(true);\n            return \"snapback\"; // Snap back the piece if move is invalid\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-move-popup\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"close\",\n            onClick: handleInvalidMovePopupClose,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Invalid move. Please try again.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"mXFk1v4CRehjwQCa9sosPcLjUh0=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","move","getRandomMove","getMediumMove","getHardMove","possibleMoves","moves","Math","floor","random","length","captureMoves","verbose","filter","captured","getRandomMoveFromList","centerSquares","centerMoves","includes","to","movesList","handleInvalidMovePopupClose","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","square","turn","setTimeout","onDrop","moveResult","from","sourceSquare","targetSquare","promotion","onClick","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    // If the player selects black, flip the board orientation\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    // If the player selects black, make the bot's first move\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    // Implement bot move logic based on the selected difficulty\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    chess.move(move);\r\n    setFen(chess.fen());\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, prioritize controlling the center\r\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\r\n    const centerMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return centerSquares.includes(move.to);\r\n    });\r\n    if (centerMoves.length > 0) {\r\n      return getRandomMoveFromList(centerMoves);\r\n    }\r\n\r\n    // If no center moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getRandomMoveFromList = (movesList) => {\r\n    return movesList[Math.floor(Math.random() * movesList.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"select-box\">\r\n          <label>\r\n            Choose player color:\r\n            <select value={playerColor} onChange={handlePlayerColorChange}>\r\n              <option value=\"white\">White</option>\r\n              <option value=\"black\">Black</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Choose difficulty:\r\n            <select value={difficulty} onChange={handleDifficultyChange}>\r\n              <option value=\"easy\">Easy</option>\r\n              <option value=\"medium\">Medium</option>\r\n              <option value=\"hard\">Hard</option>\r\n            </select>\r\n          </label>\r\n        </div>\r\n        <Chessboard\r\n          position={fen}\r\n          orientation={orientation} // Pass orientation as a prop to Chessboard\r\n          onSquareClick={(square) => {\r\n            // If it's not the player's turn or the player color doesn't match the turn, return\r\n            if (chess.turn() !== playerColor[0]) return;\r\n\r\n            const moves = chess.moves({ square: square });\r\n\r\n            // If there are no possible moves for the clicked square, return\r\n            if (moves.length === 0) return;\r\n\r\n            // Perform the move\r\n            const move = moves[0];\r\n            chess.move(move);\r\n            setFen(chess.fen());\r\n            setTimeout(makeBotMove, 500); // Delay for better visualization\r\n          }}\r\n          onDrop={(move) => {\r\n            // Validate player move\r\n            const moveResult = chess.move({\r\n              from: move.sourceSquare,\r\n              to: move.targetSquare,\r\n              promotion: \"q\", // promote to queen for simplicity\r\n            });\r\n\r\n            // If move is valid, make bot move\r\n            if (moveResult) {\r\n              setFen(chess.fen());\r\n              setTimeout(makeBotMove, 500); // Delay for better visualization\r\n            } else {\r\n              // Show invalid move pop-up\r\n              setShowInvalidMovePopup(true);\r\n              return \"snapback\"; // Snap back the piece if move is invalid\r\n            }\r\n          }}\r\n        />\r\n        {showInvalidMovePopup && (\r\n          <div className=\"invalid-move-popup\">\r\n            <div className=\"popup-content\">\r\n              <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                &times;\r\n              </span>\r\n              <p>Invalid move. Please try again.</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}