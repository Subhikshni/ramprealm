{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\");\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\n  const [promotionDialog, setPromotionDialog] = useState({\n    show: false,\n    move: null\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState({});\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    if (chess.isGameOver()) return;\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    if (move) {\n      chess.move(move);\n      setFen(chess.fen());\n      updateMoveHistory();\n      checkGameOver();\n    }\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves.length > 0 ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)] : null;\n  };\n  const handleDrop = move => {\n    // Check if the source square and target square are the same\n    if (move.sourceSquare === move.targetSquare) return;\n\n    // Validate the move against the current chess position\n    const moveResult = chess.move({\n      from: move.sourceSquare,\n      to: move.targetSquare,\n      promotion: \"q\" // Assume promotion to queen for simplicity\n    });\n\n    // Check if the move is invalid\n    if (!moveResult) {\n      setShowInvalidMovePopup(true);\n      return \"snapback\";\n    }\n\n    // Handle pawn promotion\n    if (moveResult.flags.includes(\"p\")) {\n      setPromotionDialog({\n        show: true,\n        move: moveResult\n      });\n      return;\n    }\n\n    // Update the board and move history\n    setFen(chess.fen());\n    updateMoveHistory();\n    checkGameOver();\n\n    // Make bot move after a delay\n    setTimeout(makeBotMove, 500);\n  };\n  const handlePromotion = piece => {\n    const {\n      move\n    } = promotionDialog;\n    chess.undo();\n    chess.move({\n      from: move.from,\n      to: move.to,\n      promotion: piece\n    });\n    setFen(chess.fen());\n    updateMoveHistory();\n    checkGameOver();\n    setPromotionDialog({\n      show: false,\n      move: null\n    });\n    setTimeout(makeBotMove, 500);\n  };\n  const getMediumMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    const depth = 2; // Shallow depth for medium difficulty\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const moves = chess.moves({\n      verbose: true\n    });\n    for (const move of moves) {\n      chess.move(move);\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\n      chess.undo();\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    }\n    return bestMove;\n  };\n  const getHardMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    const depth = 3; // Deeper depth for hard difficulty\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const moves = chess.moves({\n      verbose: true\n    });\n    for (const move of moves) {\n      chess.move(move);\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\n      chess.undo();\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    }\n    return bestMove;\n  };\n  const minimax = (chess, depth, alpha, beta, isMaximizingPlayer) => {\n    if (depth === 0 || chess.isGameOver()) {\n      return evaluateBoard(chess);\n    }\n    const moves = chess.moves({\n      verbose: true\n    });\n    if (isMaximizingPlayer) {\n      let maxEval = -Infinity;\n      for (const move of moves) {\n        chess.move(move);\n        const eval1 = minimax(chess, depth - 1, alpha, beta, false);\n        chess.undo();\n        maxEval = Math.max(maxEval, eval1);\n        alpha = Math.max(alpha, eval1);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      for (const move of moves) {\n        chess.move(move);\n        const eval1 = minimax(chess, depth - 1, alpha, beta, true);\n        chess.undo();\n        minEval = Math.min(minEval, eval1);\n        beta = Math.min(beta, eval1);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return minEval;\n    }\n  };\n  const evaluateBoard = chess => {\n    const pieces = {\n      p: 1,\n      n: 3,\n      b: 3,\n      r: 5,\n      q: 9,\n      k: 0 // King's value can be set very high to prevent its capture\n    };\n    let evaluation = 0;\n    const board = chess.board();\n    for (const row of board) {\n      for (const square of row) {\n        if (square) {\n          evaluation += pieces[square.type] * (square.color === \"w\" ? 1 : -1);\n        }\n      }\n    }\n    return evaluation;\n  };\n  const getRandomMoveFromList = moves => {\n    return moves[Math.floor(Math.random() * moves.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  const checkGameOver = () => {\n    if (chess.isCheckmate()) {\n      setGameOverMessage(`Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chess.isStalemate()) {\n      setGameOverMessage(\"Stalemate! It's a draw.\");\n    } else if (chess.isDraw()) {\n      setGameOverMessage(\"It's a draw.\");\n    }\n  };\n  const handleSquareClick = square => {\n    const moves = chess.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightedSquares({});\n      return;\n    }\n    const squaresToHighlight = {};\n    moves.forEach(move => {\n      squaresToHighlight[move.to] = {\n        background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\n        borderRadius: \"50%\"\n      };\n    });\n    squaresToHighlight[square] = {\n      background: \"rgba(255, 255, 0, 0.4)\"\n    };\n    setHighlightedSquares(squaresToHighlight);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: playerColor,\n              onChange: handlePlayerColorChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"white\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: difficulty,\n              onChange: handleDifficultyChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"easy\",\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"medium\",\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hard\",\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          orientation: orientation,\n          onSquareClick: handleSquareClick,\n          onDrop: handleDrop,\n          squareStyles: highlightedSquares\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-move-popup\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: handleInvalidMovePopupClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid move. Please try again.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), gameOverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameOverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), promotionDialog.show && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"promotion-dialog-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Choose Promotion Piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"q\"),\n            children: \"Queen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"r\"),\n            children: \"Rook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"b\"),\n            children: \"Bishop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"n\"),\n            children: \"Knight\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"PblJqsJRmJE1ddJWmBa40edpm6k=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","gameOverMessage","setGameOverMessage","promotionDialog","setPromotionDialog","show","move","highlightedSquares","setHighlightedSquares","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","isGameOver","getRandomMove","getMediumMove","getHardMove","updateMoveHistory","checkGameOver","possibleMoves","moves","length","Math","floor","random","handleDrop","sourceSquare","targetSquare","moveResult","from","to","promotion","flags","includes","setTimeout","handlePromotion","piece","undo","captureMoves","verbose","filter","captured","getRandomMoveFromList","depth","bestMove","bestValue","Infinity","boardValue","minimax","alpha","beta","isMaximizingPlayer","evaluateBoard","maxEval","eval1","max","minEval","min","pieces","p","n","b","r","q","k","evaluation","board","row","square","type","color","handleInvalidMovePopupClose","history","isCheckmate","turn","isStalemate","isDraw","handleSquareClick","squaresToHighlight","forEach","background","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","onDrop","squareStyles","onClick","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\");\r\n  const [moveHistory, setMoveHistory] = useState([]);\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\r\n  const [promotionDialog, setPromotionDialog] = useState({\r\n    show: false,\r\n    move: null,\r\n  });\r\n  const [highlightedSquares, setHighlightedSquares] = useState({});\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    if (chess.isGameOver()) return;\r\n\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    if (move) {\r\n      chess.move(move);\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      checkGameOver();\r\n    }\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves.length > 0\r\n      ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)]\r\n      : null;\r\n  };\r\n\r\n  const handleDrop = (move) => {\r\n    // Check if the source square and target square are the same\r\n    if (move.sourceSquare === move.targetSquare) return;\r\n\r\n    // Validate the move against the current chess position\r\n    const moveResult = chess.move({\r\n      from: move.sourceSquare,\r\n      to: move.targetSquare,\r\n      promotion: \"q\", // Assume promotion to queen for simplicity\r\n    });\r\n\r\n    // Check if the move is invalid\r\n    if (!moveResult) {\r\n      setShowInvalidMovePopup(true);\r\n      return \"snapback\";\r\n    }\r\n\r\n    // Handle pawn promotion\r\n    if (moveResult.flags.includes(\"p\")) {\r\n      setPromotionDialog({ show: true, move: moveResult });\r\n      return;\r\n    }\r\n\r\n    // Update the board and move history\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n    checkGameOver();\r\n\r\n    // Make bot move after a delay\r\n    setTimeout(makeBotMove, 500);\r\n  };\r\n\r\n  const handlePromotion = (piece) => {\r\n    const { move } = promotionDialog;\r\n    chess.undo();\r\n    chess.move({\r\n      from: move.from,\r\n      to: move.to,\r\n      promotion: piece,\r\n    });\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n    checkGameOver();\r\n    setPromotionDialog({ show: false, move: null });\r\n    setTimeout(makeBotMove, 500);\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    const depth = 2; // Shallow depth for medium difficulty\r\n    let bestMove = null;\r\n    let bestValue = -Infinity;\r\n    const moves = chess.moves({ verbose: true });\r\n\r\n    for (const move of moves) {\r\n      chess.move(move);\r\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\r\n      chess.undo();\r\n      if (boardValue > bestValue) {\r\n        bestValue = boardValue;\r\n        bestMove = move;\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    const depth = 3; // Deeper depth for hard difficulty\r\n    let bestMove = null;\r\n    let bestValue = -Infinity;\r\n    const moves = chess.moves({ verbose: true });\r\n\r\n    for (const move of moves) {\r\n      chess.move(move);\r\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\r\n      chess.undo();\r\n      if (boardValue > bestValue) {\r\n        bestValue = boardValue;\r\n        bestMove = move;\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const minimax = (chess, depth, alpha, beta, isMaximizingPlayer) => {\r\n    if (depth === 0 || chess.isGameOver()) {\r\n      return evaluateBoard(chess);\r\n    }\r\n\r\n    const moves = chess.moves({ verbose: true });\r\n    if (isMaximizingPlayer) {\r\n      let maxEval = -Infinity;\r\n      for (const move of moves) {\r\n        chess.move(move);\r\n        const eval1 = minimax(chess, depth - 1, alpha, beta, false);\r\n        chess.undo();\r\n        maxEval = Math.max(maxEval, eval1);\r\n        alpha = Math.max(alpha, eval1);\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n      return maxEval;\r\n    } else {\r\n      let minEval = Infinity;\r\n      for (const move of moves) {\r\n        chess.move(move);\r\n        const eval1 = minimax(chess, depth - 1, alpha, beta, true);\r\n        chess.undo();\r\n        minEval = Math.min(minEval, eval1);\r\n        beta = Math.min(beta, eval1);\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n      return minEval;\r\n    }\r\n  };\r\n\r\n  const evaluateBoard = (chess) => {\r\n    const pieces = {\r\n      p: 1,\r\n      n: 3,\r\n      b: 3,\r\n      r: 5,\r\n      q: 9,\r\n      k: 0, // King's value can be set very high to prevent its capture\r\n    };\r\n\r\n    let evaluation = 0;\r\n    const board = chess.board();\r\n    for (const row of board) {\r\n      for (const square of row) {\r\n        if (square) {\r\n          evaluation += pieces[square.type] * (square.color === \"w\" ? 1 : -1);\r\n        }\r\n      }\r\n    }\r\n    return evaluation;\r\n  };\r\n\r\n  const getRandomMoveFromList = (moves) => {\r\n    return moves[Math.floor(Math.random() * moves.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    if (chess.isCheckmate()) {\r\n      setGameOverMessage(\r\n        `Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`\r\n      );\r\n    } else if (chess.isStalemate()) {\r\n      setGameOverMessage(\"Stalemate! It's a draw.\");\r\n    } else if (chess.isDraw()) {\r\n      setGameOverMessage(\"It's a draw.\");\r\n    }\r\n  };\r\n\r\n  const handleSquareClick = (square) => {\r\n    const moves = chess.moves({ square, verbose: true });\r\n\r\n    if (moves.length === 0) {\r\n      setHighlightedSquares({});\r\n      return;\r\n    }\r\n\r\n    const squaresToHighlight = {};\r\n    moves.forEach((move) => {\r\n      squaresToHighlight[move.to] = {\r\n        background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\r\n        borderRadius: \"50%\",\r\n      };\r\n    });\r\n    squaresToHighlight[square] = {\r\n      background: \"rgba(255, 255, 0, 0.4)\",\r\n    };\r\n    setHighlightedSquares(squaresToHighlight);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"select-box\">\r\n            <label>\r\n              Choose player color:\r\n              <select value={playerColor} onChange={handlePlayerColorChange}>\r\n                <option value=\"white\">White</option>\r\n                <option value=\"black\">Black</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Choose difficulty:\r\n              <select value={difficulty} onChange={handleDifficultyChange}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-container\">\r\n          <Chessboard\r\n            position={fen}\r\n            orientation={orientation}\r\n            onSquareClick={handleSquareClick}\r\n            onDrop={handleDrop}\r\n            squareStyles={highlightedSquares}\r\n          />\r\n          {showInvalidMovePopup && (\r\n            <div className=\"invalid-move-popup\">\r\n              <div className=\"popup-content\">\r\n                <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                  &times;\r\n                </span>\r\n                <p>Invalid move. Please try again.</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"move-history\">\r\n          <h3>Move History</h3>\r\n          <ul>\r\n            {moveHistory.map((move, index) => (\r\n              <li key={index}>\r\n                {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {gameOverMessage && (\r\n          <div className=\"game-over-message\">\r\n            <p>{gameOverMessage}</p>\r\n          </div>\r\n        )}\r\n        {promotionDialog.show && (\r\n          <div className=\"promotion-dialog\">\r\n            <div className=\"promotion-dialog-content\">\r\n              <h3>Choose Promotion Piece</h3>\r\n              <button onClick={() => handlePromotion(\"q\")}>Queen</button>\r\n              <button onClick={() => handlePromotion(\"r\")}>Rook</button>\r\n              <button onClick={() => handlePromotion(\"b\")}>Bishop</button>\r\n              <button onClick={() => handlePromotion(\"n\")}>Knight</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,CAAC,GAAGR,QAAQ,CAAC,IAAIE,KAAK,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC;EACtD,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAACQ,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuB,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,QAAQ,CAAC;IACrDyB,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhE,MAAM6B,uBAAuB,GAAIC,CAAC,IAAK;IACrC,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACpCvB,cAAc,CAACqB,aAAa,CAAC;IAC7Bb,cAAc,CAACa,aAAa,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;IAE7D,IAAIA,aAAa,KAAK,OAAO,EAAE;MAC7BG,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMC,sBAAsB,GAAIL,CAAC,IAAK;IACpClB,aAAa,CAACkB,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI1B,KAAK,CAAC4B,UAAU,CAAC,CAAC,EAAE;IAExB,IAAIV,IAAI;IACR,QAAQf,UAAU;MAChB,KAAK,MAAM;QACTe,IAAI,GAAGW,aAAa,CAAC7B,KAAK,CAAC;QAC3B;MACF,KAAK,QAAQ;QACXkB,IAAI,GAAGY,aAAa,CAAC9B,KAAK,CAAC;QAC3B;MACF,KAAK,MAAM;QACTkB,IAAI,GAAGa,WAAW,CAAC/B,KAAK,CAAC;QACzB;MACF;QACEkB,IAAI,GAAGW,aAAa,CAAC7B,KAAK,CAAC;IAC/B;IAEA,IAAIkB,IAAI,EAAE;MACRlB,KAAK,CAACkB,IAAI,CAACA,IAAI,CAAC;MAChBZ,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;MACnB2B,iBAAiB,CAAC,CAAC;MACnBC,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;EAED,MAAMJ,aAAa,GAAI7B,KAAK,IAAK;IAC/B,MAAMkC,aAAa,GAAGlC,KAAK,CAACmC,KAAK,CAAC,CAAC;IACnC,OAAOD,aAAa,CAACE,MAAM,GAAG,CAAC,GAC3BF,aAAa,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,aAAa,CAACE,MAAM,CAAC,CAAC,GAC/D,IAAI;EACV,CAAC;EAED,MAAMI,UAAU,GAAItB,IAAI,IAAK;IAC3B;IACA,IAAIA,IAAI,CAACuB,YAAY,KAAKvB,IAAI,CAACwB,YAAY,EAAE;;IAE7C;IACA,MAAMC,UAAU,GAAG3C,KAAK,CAACkB,IAAI,CAAC;MAC5B0B,IAAI,EAAE1B,IAAI,CAACuB,YAAY;MACvBI,EAAE,EAAE3B,IAAI,CAACwB,YAAY;MACrBI,SAAS,EAAE,GAAG,CAAE;IAClB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACH,UAAU,EAAE;MACfnC,uBAAuB,CAAC,IAAI,CAAC;MAC7B,OAAO,UAAU;IACnB;;IAEA;IACA,IAAImC,UAAU,CAACI,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAClChC,kBAAkB,CAAC;QAAEC,IAAI,EAAE,IAAI;QAAEC,IAAI,EAAEyB;MAAW,CAAC,CAAC;MACpD;IACF;;IAEA;IACArC,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;IACnB2B,iBAAiB,CAAC,CAAC;IACnBC,aAAa,CAAC,CAAC;;IAEf;IACAgB,UAAU,CAACvB,WAAW,EAAE,GAAG,CAAC;EAC9B,CAAC;EAED,MAAMwB,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAM;MAAEjC;IAAK,CAAC,GAAGH,eAAe;IAChCf,KAAK,CAACoD,IAAI,CAAC,CAAC;IACZpD,KAAK,CAACkB,IAAI,CAAC;MACT0B,IAAI,EAAE1B,IAAI,CAAC0B,IAAI;MACfC,EAAE,EAAE3B,IAAI,CAAC2B,EAAE;MACXC,SAAS,EAAEK;IACb,CAAC,CAAC;IACF7C,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;IACnB2B,iBAAiB,CAAC,CAAC;IACnBC,aAAa,CAAC,CAAC;IACfjB,kBAAkB,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;IAC/C+B,UAAU,CAACvB,WAAW,EAAE,GAAG,CAAC;EAC9B,CAAC;EAED,MAAMI,aAAa,GAAI9B,KAAK,IAAK;IAC/B,MAAMqD,YAAY,GAAGrD,KAAK,CACvBmC,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC,CACxBC,MAAM,CAAErC,IAAI,IAAKA,IAAI,CAACsC,QAAQ,KAAK,IAAI,CAAC;IAC3C,IAAIH,YAAY,CAACjB,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAOqB,qBAAqB,CAACJ,YAAY,CAAC;IAC5C;IAEA,MAAMK,KAAK,GAAG,CAAC,CAAC,CAAC;IACjB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,SAAS,GAAG,CAACC,QAAQ;IACzB,MAAM1B,KAAK,GAAGnC,KAAK,CAACmC,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC;IAE5C,KAAK,MAAMpC,IAAI,IAAIiB,KAAK,EAAE;MACxBnC,KAAK,CAACkB,IAAI,CAACA,IAAI,CAAC;MAChB,MAAM4C,UAAU,GAAGC,OAAO,CAAC/D,KAAK,EAAE0D,KAAK,GAAG,CAAC,EAAE,CAACG,QAAQ,EAAEA,QAAQ,EAAE,KAAK,CAAC;MACxE7D,KAAK,CAACoD,IAAI,CAAC,CAAC;MACZ,IAAIU,UAAU,GAAGF,SAAS,EAAE;QAC1BA,SAAS,GAAGE,UAAU;QACtBH,QAAQ,GAAGzC,IAAI;MACjB;IACF;IAEA,OAAOyC,QAAQ;EACjB,CAAC;EAED,MAAM5B,WAAW,GAAI/B,KAAK,IAAK;IAC7B,MAAMqD,YAAY,GAAGrD,KAAK,CACvBmC,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC,CACxBC,MAAM,CAAErC,IAAI,IAAKA,IAAI,CAACsC,QAAQ,KAAK,IAAI,CAAC;IAC3C,IAAIH,YAAY,CAACjB,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAOqB,qBAAqB,CAACJ,YAAY,CAAC;IAC5C;IAEA,MAAMK,KAAK,GAAG,CAAC,CAAC,CAAC;IACjB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,SAAS,GAAG,CAACC,QAAQ;IACzB,MAAM1B,KAAK,GAAGnC,KAAK,CAACmC,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC;IAE5C,KAAK,MAAMpC,IAAI,IAAIiB,KAAK,EAAE;MACxBnC,KAAK,CAACkB,IAAI,CAACA,IAAI,CAAC;MAChB,MAAM4C,UAAU,GAAGC,OAAO,CAAC/D,KAAK,EAAE0D,KAAK,GAAG,CAAC,EAAE,CAACG,QAAQ,EAAEA,QAAQ,EAAE,KAAK,CAAC;MACxE7D,KAAK,CAACoD,IAAI,CAAC,CAAC;MACZ,IAAIU,UAAU,GAAGF,SAAS,EAAE;QAC1BA,SAAS,GAAGE,UAAU;QACtBH,QAAQ,GAAGzC,IAAI;MACjB;IACF;IAEA,OAAOyC,QAAQ;EACjB,CAAC;EAED,MAAMI,OAAO,GAAGA,CAAC/D,KAAK,EAAE0D,KAAK,EAAEM,KAAK,EAAEC,IAAI,EAAEC,kBAAkB,KAAK;IACjE,IAAIR,KAAK,KAAK,CAAC,IAAI1D,KAAK,CAAC4B,UAAU,CAAC,CAAC,EAAE;MACrC,OAAOuC,aAAa,CAACnE,KAAK,CAAC;IAC7B;IAEA,MAAMmC,KAAK,GAAGnC,KAAK,CAACmC,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC;IAC5C,IAAIY,kBAAkB,EAAE;MACtB,IAAIE,OAAO,GAAG,CAACP,QAAQ;MACvB,KAAK,MAAM3C,IAAI,IAAIiB,KAAK,EAAE;QACxBnC,KAAK,CAACkB,IAAI,CAACA,IAAI,CAAC;QAChB,MAAMmD,KAAK,GAAGN,OAAO,CAAC/D,KAAK,EAAE0D,KAAK,GAAG,CAAC,EAAEM,KAAK,EAAEC,IAAI,EAAE,KAAK,CAAC;QAC3DjE,KAAK,CAACoD,IAAI,CAAC,CAAC;QACZgB,OAAO,GAAG/B,IAAI,CAACiC,GAAG,CAACF,OAAO,EAAEC,KAAK,CAAC;QAClCL,KAAK,GAAG3B,IAAI,CAACiC,GAAG,CAACN,KAAK,EAAEK,KAAK,CAAC;QAC9B,IAAIJ,IAAI,IAAID,KAAK,EAAE;UACjB;QACF;MACF;MACA,OAAOI,OAAO;IAChB,CAAC,MAAM;MACL,IAAIG,OAAO,GAAGV,QAAQ;MACtB,KAAK,MAAM3C,IAAI,IAAIiB,KAAK,EAAE;QACxBnC,KAAK,CAACkB,IAAI,CAACA,IAAI,CAAC;QAChB,MAAMmD,KAAK,GAAGN,OAAO,CAAC/D,KAAK,EAAE0D,KAAK,GAAG,CAAC,EAAEM,KAAK,EAAEC,IAAI,EAAE,IAAI,CAAC;QAC1DjE,KAAK,CAACoD,IAAI,CAAC,CAAC;QACZmB,OAAO,GAAGlC,IAAI,CAACmC,GAAG,CAACD,OAAO,EAAEF,KAAK,CAAC;QAClCJ,IAAI,GAAG5B,IAAI,CAACmC,GAAG,CAACP,IAAI,EAAEI,KAAK,CAAC;QAC5B,IAAIJ,IAAI,IAAID,KAAK,EAAE;UACjB;QACF;MACF;MACA,OAAOO,OAAO;IAChB;EACF,CAAC;EAED,MAAMJ,aAAa,GAAInE,KAAK,IAAK;IAC/B,MAAMyE,MAAM,GAAG;MACbC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC,CAAE;IACR,CAAC;IAED,IAAIC,UAAU,GAAG,CAAC;IAClB,MAAMC,KAAK,GAAGjF,KAAK,CAACiF,KAAK,CAAC,CAAC;IAC3B,KAAK,MAAMC,GAAG,IAAID,KAAK,EAAE;MACvB,KAAK,MAAME,MAAM,IAAID,GAAG,EAAE;QACxB,IAAIC,MAAM,EAAE;UACVH,UAAU,IAAIP,MAAM,CAACU,MAAM,CAACC,IAAI,CAAC,IAAID,MAAM,CAACE,KAAK,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACrE;MACF;IACF;IACA,OAAOL,UAAU;EACnB,CAAC;EAED,MAAMvB,qBAAqB,GAAItB,KAAK,IAAK;IACvC,OAAOA,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,KAAK,CAACC,MAAM,CAAC,CAAC;EACxD,CAAC;EAED,MAAMkD,2BAA2B,GAAGA,CAAA,KAAM;IACxC9E,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMwB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMuD,OAAO,GAAGvF,KAAK,CAACuF,OAAO,CAAC;MAAEjC,OAAO,EAAE;IAAK,CAAC,CAAC;IAChD1C,cAAc,CAAC2E,OAAO,CAAC;EACzB,CAAC;EAED,MAAMtD,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIjC,KAAK,CAACwF,WAAW,CAAC,CAAC,EAAE;MACvB1E,kBAAkB,CACf,cAAad,KAAK,CAACyF,IAAI,CAAC,CAAC,KAAK,GAAG,GAAG,OAAO,GAAG,OAAQ,QACzD,CAAC;IACH,CAAC,MAAM,IAAIzF,KAAK,CAAC0F,WAAW,CAAC,CAAC,EAAE;MAC9B5E,kBAAkB,CAAC,yBAAyB,CAAC;IAC/C,CAAC,MAAM,IAAId,KAAK,CAAC2F,MAAM,CAAC,CAAC,EAAE;MACzB7E,kBAAkB,CAAC,cAAc,CAAC;IACpC;EACF,CAAC;EAED,MAAM8E,iBAAiB,GAAIT,MAAM,IAAK;IACpC,MAAMhD,KAAK,GAAGnC,KAAK,CAACmC,KAAK,CAAC;MAAEgD,MAAM;MAAE7B,OAAO,EAAE;IAAK,CAAC,CAAC;IAEpD,IAAInB,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBhB,qBAAqB,CAAC,CAAC,CAAC,CAAC;MACzB;IACF;IAEA,MAAMyE,kBAAkB,GAAG,CAAC,CAAC;IAC7B1D,KAAK,CAAC2D,OAAO,CAAE5E,IAAI,IAAK;MACtB2E,kBAAkB,CAAC3E,IAAI,CAAC2B,EAAE,CAAC,GAAG;QAC5BkD,UAAU,EAAE,uDAAuD;QACnEC,YAAY,EAAE;MAChB,CAAC;IACH,CAAC,CAAC;IACFH,kBAAkB,CAACV,MAAM,CAAC,GAAG;MAC3BY,UAAU,EAAE;IACd,CAAC;IACD3E,qBAAqB,CAACyE,kBAAkB,CAAC;EAC3C,CAAC;EAED,oBACEhG,OAAA;IAAAoG,QAAA,gBACEpG,OAAA,CAACF,OAAO;MAAAuG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXxG,OAAA;MAAKyG,SAAS,EAAC,oBAAoB;MAAAL,QAAA,gBACjCpG,OAAA;QAAKyG,SAAS,EAAC,SAAS;QAAAL,QAAA,eACtBpG,OAAA;UAAKyG,SAAS,EAAC,YAAY;UAAAL,QAAA,gBACzBpG,OAAA;YAAAoG,QAAA,GAAO,sBAEL,eAAApG,OAAA;cAAQ4B,KAAK,EAAExB,WAAY;cAACsG,QAAQ,EAAElF,uBAAwB;cAAA4E,QAAA,gBAC5DpG,OAAA;gBAAQ4B,KAAK,EAAC,OAAO;gBAAAwE,QAAA,EAAC;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpCxG,OAAA;gBAAQ4B,KAAK,EAAC,OAAO;gBAAAwE,QAAA,EAAC;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACRxG,OAAA;YAAAoG,QAAA,GAAO,oBAEL,eAAApG,OAAA;cAAQ4B,KAAK,EAAEtB,UAAW;cAACoG,QAAQ,EAAE5E,sBAAuB;cAAAsE,QAAA,gBAC1DpG,OAAA;gBAAQ4B,KAAK,EAAC,MAAM;gBAAAwE,QAAA,EAAC;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAClCxG,OAAA;gBAAQ4B,KAAK,EAAC,QAAQ;gBAAAwE,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACtCxG,OAAA;gBAAQ4B,KAAK,EAAC,MAAM;gBAAAwE,QAAA,EAAC;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNxG,OAAA;QAAKyG,SAAS,EAAC,iBAAiB;QAAAL,QAAA,gBAC9BpG,OAAA,CAACJ,UAAU;UACT+G,QAAQ,EAAEnG,GAAI;UACdI,WAAW,EAAEA,WAAY;UACzBgG,aAAa,EAAEb,iBAAkB;UACjCc,MAAM,EAAElE,UAAW;UACnBmE,YAAY,EAAExF;QAAmB;UAAA+E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,EACD9F,oBAAoB,iBACnBV,OAAA;UAAKyG,SAAS,EAAC,oBAAoB;UAAAL,QAAA,eACjCpG,OAAA;YAAKyG,SAAS,EAAC,eAAe;YAAAL,QAAA,gBAC5BpG,OAAA;cAAMyG,SAAS,EAAC,OAAO;cAACM,OAAO,EAAEtB,2BAA4B;cAAAW,QAAA,EAAC;YAE9D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACPxG,OAAA;cAAAoG,QAAA,EAAG;YAA+B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACNxG,OAAA;QAAKyG,SAAS,EAAC,cAAc;QAAAL,QAAA,gBAC3BpG,OAAA;UAAAoG,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBxG,OAAA;UAAAoG,QAAA,EACGtF,WAAW,CAACkG,GAAG,CAAC,CAAC3F,IAAI,EAAE4F,KAAK,kBAC3BjH,OAAA;YAAAoG,QAAA,GACGa,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO,EAAC,IAAE,EAAC5F,IAAI,CAAC6F,GAAG;UAAA,GADzCD,KAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EACLxF,eAAe,iBACdhB,OAAA;QAAKyG,SAAS,EAAC,mBAAmB;QAAAL,QAAA,eAChCpG,OAAA;UAAAoG,QAAA,EAAIpF;QAAe;UAAAqF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CACN,EACAtF,eAAe,CAACE,IAAI,iBACnBpB,OAAA;QAAKyG,SAAS,EAAC,kBAAkB;QAAAL,QAAA,eAC/BpG,OAAA;UAAKyG,SAAS,EAAC,0BAA0B;UAAAL,QAAA,gBACvCpG,OAAA;YAAAoG,QAAA,EAAI;UAAsB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/BxG,OAAA;YAAQ+G,OAAO,EAAEA,CAAA,KAAM1D,eAAe,CAAC,GAAG,CAAE;YAAA+C,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3DxG,OAAA;YAAQ+G,OAAO,EAAEA,CAAA,KAAM1D,eAAe,CAAC,GAAG,CAAE;YAAA+C,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1DxG,OAAA;YAAQ+G,OAAO,EAAEA,CAAA,KAAM1D,eAAe,CAAC,GAAG,CAAE;YAAA+C,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5DxG,OAAA;YAAQ+G,OAAO,EAAEA,CAAA,KAAM1D,eAAe,CAAC,GAAG,CAAE;YAAA+C,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtG,EAAA,CA/UID,QAAQ;AAAAkH,EAAA,GAARlH,QAAQ;AAiVd,eAAeA,QAAQ;AAAC,IAAAkH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}