{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_DEPTH = 3;\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [fen, setFen] = useState(chess.fen());\n  const evaluateBoard = board => {\n    const pieceValues = {\n      p: 1,\n      n: 3,\n      b: 3,\n      r: 5,\n      q: 9\n    };\n    let score = 0;\n    board.forEach(row => {\n      row.forEach(piece => {\n        if (piece) {\n          const pieceType = piece.type;\n          const pieceColor = piece.color === \"w\" ? 1 : -1;\n          score += pieceValues[pieceType] * pieceColor;\n        }\n      });\n    });\n    return score;\n  };\n  const minimax = (chess, depth, alpha, beta, maximizingPlayer) => {\n    if (depth === 0 || chess.game_over() || chess.in_draw() || chess.in_stalemate()) {\n      return evaluateBoard(chess.board());\n    }\n    if (maximizingPlayer) {\n      let maxEval = -Infinity;\n      const possibleMoves = chess.moves();\n      for (let move of possibleMoves) {\n        chess.move(move);\n        const evaluation = minimax(chess, depth - 1, alpha, beta, false);\n        chess.undo();\n        maxEval = Math.max(maxEval, evaluation);\n        alpha = Math.max(alpha, evaluation);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      const possibleMoves = chess.moves();\n      for (let move of possibleMoves) {\n        chess.move(move);\n        const evaluation = minimax(chess, depth - 1, alpha, beta, true);\n        chess.undo();\n        minEval = Math.min(minEval, evaluation);\n        beta = Math.min(beta, evaluation);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return minEval;\n    }\n  };\n  const findBestMove = chess => {\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const possibleMoves = chess.moves();\n    for (let move of possibleMoves) {\n      chess.move(move);\n      const evaluation = minimax(chess, MAX_DEPTH, -Infinity, Infinity, false);\n      chess.undo();\n      if (evaluation > bestValue) {\n        bestValue = evaluation;\n        bestMove = move;\n      }\n    }\n    return bestMove;\n  };\n  const handleMove = move => {\n    if (chess.move(move)) {\n      const bestMove = findBestMove(chess);\n      if (bestMove) {\n        chess.move(bestMove);\n        setFen(chess.fen());\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chessboard, {\n    position: fen,\n    onDrop: move => handleMove({\n      from: move.sourceSquare,\n      to: move.targetSquare\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"levO+ldp2hGqe6PmLZ8mZlvltQU=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","jsxDEV","_jsxDEV","MAX_DEPTH","ChessBot","_s","chess","fen","setFen","evaluateBoard","board","pieceValues","p","n","b","r","q","score","forEach","row","piece","pieceType","type","pieceColor","color","minimax","depth","alpha","beta","maximizingPlayer","game_over","in_draw","in_stalemate","maxEval","Infinity","possibleMoves","moves","move","evaluation","undo","Math","max","minEval","min","findBestMove","bestMove","bestValue","handleMove","position","onDrop","from","sourceSquare","to","targetSquare","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\n\r\nconst MAX_DEPTH = 3;\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [fen, setFen] = useState(chess.fen());\r\n\r\n  const evaluateBoard = (board) => {\r\n    const pieceValues = {\r\n      p: 1,\r\n      n: 3,\r\n      b: 3,\r\n      r: 5,\r\n      q: 9,\r\n    };\r\n\r\n    let score = 0;\r\n\r\n    board.forEach((row) => {\r\n      row.forEach((piece) => {\r\n        if (piece) {\r\n          const pieceType = piece.type;\r\n          const pieceColor = piece.color === \"w\" ? 1 : -1;\r\n          score += pieceValues[pieceType] * pieceColor;\r\n        }\r\n      });\r\n    });\r\n\r\n    return score;\r\n  };\r\n\r\n  const minimax = (chess, depth, alpha, beta, maximizingPlayer) => {\r\n    if (\r\n      depth === 0 ||\r\n      chess.game_over() ||\r\n      chess.in_draw() ||\r\n      chess.in_stalemate()\r\n    ) {\r\n      return evaluateBoard(chess.board());\r\n    }\r\n\r\n    if (maximizingPlayer) {\r\n      let maxEval = -Infinity;\r\n      const possibleMoves = chess.moves();\r\n\r\n      for (let move of possibleMoves) {\r\n        chess.move(move);\r\n        const evaluation = minimax(chess, depth - 1, alpha, beta, false);\r\n        chess.undo();\r\n\r\n        maxEval = Math.max(maxEval, evaluation);\r\n        alpha = Math.max(alpha, evaluation);\r\n\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return maxEval;\r\n    } else {\r\n      let minEval = Infinity;\r\n      const possibleMoves = chess.moves();\r\n\r\n      for (let move of possibleMoves) {\r\n        chess.move(move);\r\n        const evaluation = minimax(chess, depth - 1, alpha, beta, true);\r\n        chess.undo();\r\n\r\n        minEval = Math.min(minEval, evaluation);\r\n        beta = Math.min(beta, evaluation);\r\n\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return minEval;\r\n    }\r\n  };\r\n\r\n  const findBestMove = (chess) => {\r\n    let bestMove = null;\r\n    let bestValue = -Infinity;\r\n\r\n    const possibleMoves = chess.moves();\r\n\r\n    for (let move of possibleMoves) {\r\n      chess.move(move);\r\n      const evaluation = minimax(chess, MAX_DEPTH, -Infinity, Infinity, false);\r\n      chess.undo();\r\n\r\n      if (evaluation > bestValue) {\r\n        bestValue = evaluation;\r\n        bestMove = move;\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const handleMove = (move) => {\r\n    if (chess.move(move)) {\r\n      const bestMove = findBestMove(chess);\r\n      if (bestMove) {\r\n        chess.move(bestMove);\r\n        setFen(chess.fen());\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Chessboard\r\n      position={fen}\r\n      onDrop={(move) =>\r\n        handleMove({ from: move.sourceSquare, to: move.targetSquare })\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}