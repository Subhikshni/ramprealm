{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\n  const [gameOverMessage, setGameOverMessage] = useState(\"\"); // Added state for game over message\n\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    // If the player selects black, flip the board orientation\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n\n    // If the player selects black, make the bot's first move\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    // If the game is over, do not make any more moves\n    if (chess.game_over) return;\n\n    // Implement bot move logic based on the selected difficulty\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    if (move) {\n      chess.move(move);\n      setFen(chess.fen());\n      updateMoveHistory();\n      checkGameOver();\n    }\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves.length > 0 ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)] : null;\n  };\n  const handleDrop = move => {\n    // Check if the source square and target square are the same\n    if (move.sourceSquare === move.targetSquare) return;\n\n    // Validate player move\n    const moveResult = chess.move({\n      from: move.sourceSquare,\n      to: move.targetSquare,\n      promotion: \"q\" // promote to queen for simplicity\n    });\n\n    // If move is valid, make bot move\n    if (moveResult) {\n      setFen(chess.fen());\n      updateMoveHistory();\n      checkGameOver();\n      setTimeout(makeBotMove, 500); // Delay for better visualization\n    } else {\n      // Show invalid move pop-up\n      setShowInvalidMovePopup(true);\n      return \"snapback\"; // Snap back the piece if move is invalid\n    }\n  };\n  const getMediumMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getHardMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, prioritize controlling the center\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\n    const centerMoves = chess.moves({\n      verbose: true\n    }).filter(move => centerSquares.includes(move.to));\n    if (centerMoves.length > 0) {\n      return getRandomMoveFromList(centerMoves);\n    }\n\n    // If no center moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getRandomMoveFromList = movesList => {\n    return movesList[Math.floor(Math.random() * movesList.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  const checkGameOver = () => {\n    if (chess.isCheckmate()) {\n      setGameOverMessage(`Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chess.isStalemate()) {\n      setGameOverMessage(\"Stalemate! It's a draw.\");\n    } else if (chess.isDraw()) {\n      setGameOverMessage(\"It's a draw.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: playerColor,\n              onChange: handlePlayerColorChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"white\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: difficulty,\n              onChange: handleDifficultyChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"easy\",\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"medium\",\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hard\",\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          orientation: orientation // Pass orientation as a prop to Chessboard\n          ,\n          onSquareClick: square => {\n            // If it's not the player's turn or the player color doesn't match the turn, return\n            if (chess.turn() !== playerColor[0]) return;\n            const moves = chess.moves({\n              square\n            });\n\n            // If there are no possible moves for the clicked square, return\n            if (moves.length === 0) return;\n\n            // Perform the move\n            const move = moves[0];\n            chess.move(move);\n            setFen(chess.fen());\n            updateMoveHistory();\n            checkGameOver();\n            setTimeout(makeBotMove, 500); // Delay for better visualization\n          },\n          onDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-move-popup\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: handleInvalidMovePopupClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid move. Please try again.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), gameOverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameOverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"rlWIR5HgShouBxoL4SA000SuRVU=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","gameOverMessage","setGameOverMessage","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","game_over","move","getRandomMove","getMediumMove","getHardMove","updateMoveHistory","checkGameOver","possibleMoves","moves","length","Math","floor","random","handleDrop","sourceSquare","targetSquare","moveResult","from","to","promotion","setTimeout","captureMoves","verbose","filter","captured","getRandomMoveFromList","centerSquares","centerMoves","includes","movesList","handleInvalidMovePopupClose","history","isCheckmate","turn","isStalemate","isDraw","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","square","onDrop","onClick","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\r\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\"); // Added state for game over message\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    // If the player selects black, flip the board orientation\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    // If the player selects black, make the bot's first move\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    // If the game is over, do not make any more moves\r\n    if (chess.game_over) return;\r\n\r\n    // Implement bot move logic based on the selected difficulty\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    if (move) {\r\n      chess.move(move);\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      checkGameOver();\r\n    }\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves.length > 0\r\n      ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)]\r\n      : null;\r\n  };\r\n\r\n  const handleDrop = (move) => {\r\n    // Check if the source square and target square are the same\r\n    if (move.sourceSquare === move.targetSquare) return;\r\n\r\n    // Validate player move\r\n    const moveResult = chess.move({\r\n      from: move.sourceSquare,\r\n      to: move.targetSquare,\r\n      promotion: \"q\", // promote to queen for simplicity\r\n    });\r\n\r\n    // If move is valid, make bot move\r\n    if (moveResult) {\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      checkGameOver();\r\n      setTimeout(makeBotMove, 500); // Delay for better visualization\r\n    } else {\r\n      // Show invalid move pop-up\r\n      setShowInvalidMovePopup(true);\r\n      return \"snapback\"; // Snap back the piece if move is invalid\r\n    }\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, prioritize controlling the center\r\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\r\n    const centerMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => centerSquares.includes(move.to));\r\n    if (centerMoves.length > 0) {\r\n      return getRandomMoveFromList(centerMoves);\r\n    }\r\n\r\n    // If no center moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getRandomMoveFromList = (movesList) => {\r\n    return movesList[Math.floor(Math.random() * movesList.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    if (chess.isCheckmate()) {\r\n      setGameOverMessage(\r\n        `Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`\r\n      );\r\n    } else if (chess.isStalemate()) {\r\n      setGameOverMessage(\"Stalemate! It's a draw.\");\r\n    } else if (chess.isDraw()) {\r\n      setGameOverMessage(\"It's a draw.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"select-box\">\r\n            <label>\r\n              Choose player color:\r\n              <select value={playerColor} onChange={handlePlayerColorChange}>\r\n                <option value=\"white\">White</option>\r\n                <option value=\"black\">Black</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Choose difficulty:\r\n              <select value={difficulty} onChange={handleDifficultyChange}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-container\">\r\n          <Chessboard\r\n            position={fen}\r\n            orientation={orientation} // Pass orientation as a prop to Chessboard\r\n            onSquareClick={(square) => {\r\n              // If it's not the player's turn or the player color doesn't match the turn, return\r\n              if (chess.turn() !== playerColor[0]) return;\r\n\r\n              const moves = chess.moves({ square });\r\n\r\n              // If there are no possible moves for the clicked square, return\r\n              if (moves.length === 0) return;\r\n\r\n              // Perform the move\r\n              const move = moves[0];\r\n              chess.move(move);\r\n              setFen(chess.fen());\r\n              updateMoveHistory();\r\n              checkGameOver();\r\n              setTimeout(makeBotMove, 500); // Delay for better visualization\r\n            }}\r\n            onDrop={handleDrop}\r\n          />\r\n          {showInvalidMovePopup && (\r\n            <div className=\"invalid-move-popup\">\r\n              <div className=\"popup-content\">\r\n                <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                  &times;\r\n                </span>\r\n                <p>Invalid move. Please try again.</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"move-history\">\r\n          <h3>Move History</h3>\r\n          <ul>\r\n            {moveHistory.map((move, index) => (\r\n              <li key={index}>\r\n                {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {gameOverMessage && (\r\n          <div className=\"game-over-message\">\r\n            <p>{gameOverMessage}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}