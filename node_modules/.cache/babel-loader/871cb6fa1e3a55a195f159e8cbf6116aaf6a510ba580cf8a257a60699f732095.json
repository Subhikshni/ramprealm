{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 2\\\\peerhealhaven\\\\src\\\\components\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./MoodTracker.css\";\nimport NavBar2 from \"./NavBar2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth();\n\n  // Get the number of days in the current month\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n\n  // Array to store the dates for the current month\n  const datesForCurrentMonth = [];\n\n  // Iterate over the days of the month\n  for (let i = 1; i <= daysInMonth; i++) {\n    // Format the date as \"YYYY-MM-DD\"\n    const formattedDate = `${currentYear}-${currentMonth + 1}-${i}`;\n    datesForCurrentMonth.push(formattedDate);\n  }\n\n  // Define initial data structure for mood ratings\n  const initialMoodData = datesForCurrentMonth.map(date => ({\n    date,\n    emotions: {\n      Happy: null,\n      Sad: null,\n      Angry: null,\n      Excited: null\n    }\n  }));\n\n  // State to manage mood data\n  const [moodData, setMoodData] = useState(initialMoodData);\n\n  // Function to handle mood rating\n  const handleMoodRating = (date, emotion, rating) => {\n    // Update the mood data with the new rating\n    const updatedMoodData = moodData.map(entry => {\n      if (entry.date === date) {\n        return {\n          ...entry,\n          emotions: {\n            ...entry.emotions,\n            [emotion]: rating\n          }\n        };\n      }\n      return entry;\n    });\n    setMoodData(updatedMoodData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-tracker-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mood Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"mood-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Emotion\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 19\n                }, this), datesForCurrentMonth.map((date, index) =>\n                // Only render 7 visible columns\n                index < 7 && /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: date\n                }, date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 36\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.keys(initialMoodData[0].emotions).map(emotion => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: emotion\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 21\n                }, this), initialMoodData.map((entry, index) => index < 7 && /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleMoodRating(entry.date, emotion, 10),\n                    children: \"10\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 29\n                  }, this)\n                }, `${entry.date}-${emotion}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 27\n                }, this))]\n              }, emotion, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"o1/MYItaagsbh6djPt3sd3empLE=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","NavBar2","jsxDEV","_jsxDEV","MoodTracker","_s","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","daysInMonth","getDate","datesForCurrentMonth","i","formattedDate","push","initialMoodData","map","date","emotions","Happy","Sad","Angry","Excited","moodData","setMoodData","handleMoodRating","emotion","rating","updatedMoodData","entry","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","Object","keys","onClick","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 2/peerhealhaven/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./MoodTracker.css\";\r\nimport NavBar2 from \"./NavBar2\";\r\n\r\nconst MoodTracker = () => {\r\n  const currentDate = new Date();\r\n  const currentYear = currentDate.getFullYear();\r\n  const currentMonth = currentDate.getMonth();\r\n\r\n  // Get the number of days in the current month\r\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n\r\n  // Array to store the dates for the current month\r\n  const datesForCurrentMonth = [];\r\n\r\n  // Iterate over the days of the month\r\n  for (let i = 1; i <= daysInMonth; i++) {\r\n    // Format the date as \"YYYY-MM-DD\"\r\n    const formattedDate = `${currentYear}-${currentMonth + 1}-${i}`;\r\n    datesForCurrentMonth.push(formattedDate);\r\n  }\r\n\r\n  // Define initial data structure for mood ratings\r\n  const initialMoodData = datesForCurrentMonth.map((date) => ({\r\n    date,\r\n    emotions: { Happy: null, Sad: null, Angry: null, Excited: null },\r\n  }));\r\n\r\n  // State to manage mood data\r\n  const [moodData, setMoodData] = useState(initialMoodData);\r\n\r\n  // Function to handle mood rating\r\n  const handleMoodRating = (date, emotion, rating) => {\r\n    // Update the mood data with the new rating\r\n    const updatedMoodData = moodData.map((entry) => {\r\n      if (entry.date === date) {\r\n        return {\r\n          ...entry,\r\n          emotions: {\r\n            ...entry.emotions,\r\n            [emotion]: rating,\r\n          },\r\n        };\r\n      }\r\n      return entry;\r\n    });\r\n    setMoodData(updatedMoodData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"mood-tracker-container\">\r\n        <h2>Mood Tracker</h2>\r\n        <div className=\"table-container\">\r\n          <div className=\"table-wrapper\">\r\n            <table className=\"mood-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Emotion</th>\r\n                  {datesForCurrentMonth.map(\r\n                    (date, index) =>\r\n                      // Only render 7 visible columns\r\n                      index < 7 && <th key={date}>{date}</th>\r\n                  )}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(initialMoodData[0].emotions).map((emotion) => (\r\n                  <tr key={emotion}>\r\n                    <td>{emotion}</td>\r\n                    {initialMoodData.map(\r\n                      (entry, index) =>\r\n                        index < 7 && (\r\n                          <td key={`${entry.date}-${emotion}`}>\r\n                            <button\r\n                              onClick={() =>\r\n                                handleMoodRating(entry.date, emotion, 10)\r\n                              }\r\n                            >\r\n                              10\r\n                            </button>\r\n                            {/* Add more rating buttons or input fields as needed */}\r\n                          </td>\r\n                        )\r\n                    )}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}