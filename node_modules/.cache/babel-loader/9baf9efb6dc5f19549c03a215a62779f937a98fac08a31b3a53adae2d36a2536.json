{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const handlePlayerColorChange = e => {\n    setPlayerColor(e.target.value);\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    // Implement bot move logic based on the selected difficulty\n    // For simplicity, let's make a random move for now\n    const possibleMoves = chess.moves();\n    const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    chess.move(randomMove);\n    setFen(chess.fen());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: playerColor,\n            onChange: handlePlayerColorChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"white\",\n              children: \"White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"black\",\n              children: \"Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: difficulty,\n            onChange: handleDifficultyChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"easy\",\n              children: \"Easy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medium\",\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"hard\",\n              children: \"Hard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: fen,\n        onDrop: move => {\n          // Validate player move\n          const moveResult = chess.move({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\" // promote to queen for simplicity\n          });\n\n          // If move is valid, make bot move\n          if (moveResult) {\n            setFen(chess.fen());\n            setTimeout(makeBotMove, 500); // Delay for better visualization\n          } else {\n            return \"snapback\"; // Snap back the piece if move is invalid\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"aOQP25HhuTqdKqcp4+MgBsHA32M=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","Chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","handlePlayerColorChange","e","target","value","handleDifficultyChange","makeBotMove","possibleMoves","moves","randomMove","Math","floor","random","length","move","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onDrop","moveResult","from","sourceSquare","to","targetSquare","promotion","setTimeout","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/home.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    setPlayerColor(e.target.value);\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    // Implement bot move logic based on the selected difficulty\r\n    // For simplicity, let's make a random move for now\r\n    const possibleMoves = chess.moves();\r\n    const randomMove =\r\n      possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n    chess.move(randomMove);\r\n    setFen(chess.fen());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"select-box\">\r\n          <label>\r\n            Choose player color:\r\n            <select value={playerColor} onChange={handlePlayerColorChange}>\r\n              <option value=\"white\">White</option>\r\n              <option value=\"black\">Black</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Choose difficulty:\r\n            <select value={difficulty} onChange={handleDifficultyChange}>\r\n              <option value=\"easy\">Easy</option>\r\n              <option value=\"medium\">Medium</option>\r\n              <option value=\"hard\">Hard</option>\r\n            </select>\r\n          </label>\r\n        </div>\r\n        <Chessboard\r\n          position={fen}\r\n          onDrop={(move) => {\r\n            // Validate player move\r\n            const moveResult = chess.move({\r\n              from: move.sourceSquare,\r\n              to: move.targetSquare,\r\n              promotion: \"q\", // promote to queen for simplicity\r\n            });\r\n\r\n            // If move is valid, make bot move\r\n            if (moveResult) {\r\n              setFen(chess.fen());\r\n              setTimeout(makeBotMove, 500); // Delay for better visualization\r\n            } else {\r\n              return \"snapback\"; // Snap back the piece if move is invalid\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}