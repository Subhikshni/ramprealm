{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\");\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\n  const [promotionDialog, setPromotionDialog] = useState({\n    show: false,\n    move: null\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState({});\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = async () => {\n    if (chess.isGameOver()) return;\n    let depth;\n    switch (difficulty) {\n      case \"easy\":\n        depth = 5; // Lower depth for easier difficulty\n        break;\n      case \"medium\":\n        depth = 10;\n        break;\n      case \"hard\":\n        depth = 15; // Higher depth for harder difficulty\n        break;\n      default:\n        depth = 5;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5002/stockfish\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fen: chess.fen(),\n          depth\n        })\n      });\n      const data = await response.json();\n      if (data.bestMove) {\n        chess.move({\n          from: data.bestMove.substring(0, 2),\n          to: data.bestMove.substring(2, 4),\n          promotion: \"q\"\n        });\n        setFen(chess.fen());\n        updateMoveHistory();\n        checkGameOver();\n      }\n    } catch (error) {\n      console.error(\"Error fetching move from Stockfish:\", error);\n    }\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves.length > 0 ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)] : null;\n  };\n  const handleDrop = move => {\n    // Check if the source square and target square are the same\n    if (move.sourceSquare === move.targetSquare) return;\n\n    // Validate the move against the current chess position\n    const moveResult = chess.move({\n      from: move.sourceSquare,\n      to: move.targetSquare,\n      promotion: \"q\" // Assume promotion to queen for simplicity\n    });\n\n    // Check if the move is invalid\n    if (!moveResult) {\n      setShowInvalidMovePopup(true);\n      return \"snapback\";\n    }\n\n    // Handle pawn promotion\n    if (moveResult.flags.includes(\"p\")) {\n      setPromotionDialog({\n        show: true,\n        move: moveResult\n      });\n      return;\n    }\n\n    // Update the board and move history\n    setFen(chess.fen());\n    updateMoveHistory();\n    checkGameOver();\n\n    // Make bot move after a delay\n    setTimeout(makeBotMove, 500);\n  };\n  const handlePromotion = piece => {\n    const {\n      move\n    } = promotionDialog;\n    chess.undo();\n    chess.move({\n      from: move.from,\n      to: move.to,\n      promotion: piece\n    });\n    setFen(chess.fen());\n    updateMoveHistory();\n    checkGameOver();\n    setPromotionDialog({\n      show: false,\n      move: null\n    });\n    setTimeout(makeBotMove, 500);\n  };\n  const getMediumMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    const depth = 2; // Shallow depth for medium difficulty\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const moves = chess.moves({\n      verbose: true\n    });\n    for (const move of moves) {\n      chess.move(move);\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\n      chess.undo();\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    }\n    return bestMove;\n  };\n  const getHardMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    const depth = 3; // Deeper depth for hard difficulty\n    let bestMove = null;\n    let bestValue = -Infinity;\n    const moves = chess.moves({\n      verbose: true\n    });\n    for (const move of moves) {\n      chess.move(move);\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\n      chess.undo();\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    }\n    return bestMove;\n  };\n  const minimax = (chess, depth, alpha, beta, isMaximizingPlayer) => {\n    if (depth === 0 || chess.isGameOver()) {\n      return evaluateBoard(chess);\n    }\n    const moves = chess.moves({\n      verbose: true\n    });\n    if (isMaximizingPlayer) {\n      let maxEval = -Infinity;\n      for (const move of moves) {\n        chess.move(move);\n        const eval1 = minimax(chess, depth - 1, alpha, beta, false);\n        chess.undo();\n        maxEval = Math.max(maxEval, eval1);\n        alpha = Math.max(alpha, eval1);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return maxEval;\n    } else {\n      let minEval = Infinity;\n      for (const move of moves) {\n        chess.move(move);\n        const eval1 = minimax(chess, depth - 1, alpha, beta, true);\n        chess.undo();\n        minEval = Math.min(minEval, eval1);\n        beta = Math.min(beta, eval1);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return minEval;\n    }\n  };\n  const evaluateBoard = chess => {\n    const pieces = {\n      p: 1,\n      n: 3,\n      b: 3,\n      r: 5,\n      q: 9,\n      k: 0 // King's value can be set very high to prevent its capture\n    };\n    let evaluation = 0;\n    const board = chess.board();\n    for (const row of board) {\n      for (const square of row) {\n        if (square) {\n          evaluation += pieces[square.type] * (square.color === \"w\" ? 1 : -1);\n        }\n      }\n    }\n    return evaluation;\n  };\n  const getRandomMoveFromList = moves => {\n    return moves[Math.floor(Math.random() * moves.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  const checkGameOver = () => {\n    if (chess.isCheckmate()) {\n      setGameOverMessage(`Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chess.isStalemate()) {\n      setGameOverMessage(\"Stalemate! It's a draw.\");\n    } else if (chess.isDraw()) {\n      setGameOverMessage(\"It's a draw.\");\n    }\n  };\n  const handleSquareClick = square => {\n    const moves = chess.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightedSquares({});\n      return;\n    }\n    const squaresToHighlight = {};\n    moves.forEach(move => {\n      squaresToHighlight[move.to] = {\n        background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\n        borderRadius: \"50%\"\n      };\n    });\n    squaresToHighlight[square] = {\n      background: \"rgba(255, 255, 0, 0.4)\"\n    };\n    setHighlightedSquares(squaresToHighlight);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: playerColor,\n              onChange: handlePlayerColorChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"white\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: difficulty,\n              onChange: handleDifficultyChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"easy\",\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"medium\",\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hard\",\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          orientation: orientation,\n          onSquareClick: handleSquareClick,\n          onDrop: handleDrop,\n          squareStyles: highlightedSquares\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-move-popup\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: handleInvalidMovePopupClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid move. Please try again.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), gameOverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameOverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), promotionDialog.show && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"promotion-dialog-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Choose Promotion Piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"q\"),\n            children: \"Queen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"r\"),\n            children: \"Rook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"b\"),\n            children: \"Bishop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"n\"),\n            children: \"Knight\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"PblJqsJRmJE1ddJWmBa40edpm6k=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","gameOverMessage","setGameOverMessage","promotionDialog","setPromotionDialog","show","move","highlightedSquares","setHighlightedSquares","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","isGameOver","depth","response","fetch","method","headers","body","JSON","stringify","data","json","bestMove","from","substring","to","promotion","updateMoveHistory","checkGameOver","error","console","getRandomMove","possibleMoves","moves","length","Math","floor","random","handleDrop","sourceSquare","targetSquare","moveResult","flags","includes","setTimeout","handlePromotion","piece","undo","getMediumMove","captureMoves","verbose","filter","captured","getRandomMoveFromList","bestValue","Infinity","boardValue","minimax","getHardMove","alpha","beta","isMaximizingPlayer","evaluateBoard","maxEval","eval1","max","minEval","min","pieces","p","n","b","r","q","k","evaluation","board","row","square","type","color","handleInvalidMovePopupClose","history","isCheckmate","turn","isStalemate","isDraw","handleSquareClick","squaresToHighlight","forEach","background","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","onDrop","squareStyles","onClick","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\");\r\n  const [moveHistory, setMoveHistory] = useState([]);\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\r\n  const [promotionDialog, setPromotionDialog] = useState({\r\n    show: false,\r\n    move: null,\r\n  });\r\n  const [highlightedSquares, setHighlightedSquares] = useState({});\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = async () => {\r\n    if (chess.isGameOver()) return;\r\n\r\n    let depth;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        depth = 5; // Lower depth for easier difficulty\r\n        break;\r\n      case \"medium\":\r\n        depth = 10;\r\n        break;\r\n      case \"hard\":\r\n        depth = 15; // Higher depth for harder difficulty\r\n        break;\r\n      default:\r\n        depth = 5;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5002/stockfish\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ fen: chess.fen(), depth }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.bestMove) {\r\n        chess.move({\r\n          from: data.bestMove.substring(0, 2),\r\n          to: data.bestMove.substring(2, 4),\r\n          promotion: \"q\",\r\n        });\r\n        setFen(chess.fen());\r\n        updateMoveHistory();\r\n        checkGameOver();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching move from Stockfish:\", error);\r\n    }\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves.length > 0\r\n      ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)]\r\n      : null;\r\n  };\r\n\r\n  const handleDrop = (move) => {\r\n    // Check if the source square and target square are the same\r\n    if (move.sourceSquare === move.targetSquare) return;\r\n\r\n    // Validate the move against the current chess position\r\n    const moveResult = chess.move({\r\n      from: move.sourceSquare,\r\n      to: move.targetSquare,\r\n      promotion: \"q\", // Assume promotion to queen for simplicity\r\n    });\r\n\r\n    // Check if the move is invalid\r\n    if (!moveResult) {\r\n      setShowInvalidMovePopup(true);\r\n      return \"snapback\";\r\n    }\r\n\r\n    // Handle pawn promotion\r\n    if (moveResult.flags.includes(\"p\")) {\r\n      setPromotionDialog({ show: true, move: moveResult });\r\n      return;\r\n    }\r\n\r\n    // Update the board and move history\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n    checkGameOver();\r\n\r\n    // Make bot move after a delay\r\n    setTimeout(makeBotMove, 500);\r\n  };\r\n\r\n  const handlePromotion = (piece) => {\r\n    const { move } = promotionDialog;\r\n    chess.undo();\r\n    chess.move({\r\n      from: move.from,\r\n      to: move.to,\r\n      promotion: piece,\r\n    });\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n    checkGameOver();\r\n    setPromotionDialog({ show: false, move: null });\r\n    setTimeout(makeBotMove, 500);\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    const depth = 2; // Shallow depth for medium difficulty\r\n    let bestMove = null;\r\n    let bestValue = -Infinity;\r\n    const moves = chess.moves({ verbose: true });\r\n\r\n    for (const move of moves) {\r\n      chess.move(move);\r\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\r\n      chess.undo();\r\n      if (boardValue > bestValue) {\r\n        bestValue = boardValue;\r\n        bestMove = move;\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    const depth = 3; // Deeper depth for hard difficulty\r\n    let bestMove = null;\r\n    let bestValue = -Infinity;\r\n    const moves = chess.moves({ verbose: true });\r\n\r\n    for (const move of moves) {\r\n      chess.move(move);\r\n      const boardValue = minimax(chess, depth - 1, -Infinity, Infinity, false);\r\n      chess.undo();\r\n      if (boardValue > bestValue) {\r\n        bestValue = boardValue;\r\n        bestMove = move;\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const minimax = (chess, depth, alpha, beta, isMaximizingPlayer) => {\r\n    if (depth === 0 || chess.isGameOver()) {\r\n      return evaluateBoard(chess);\r\n    }\r\n\r\n    const moves = chess.moves({ verbose: true });\r\n    if (isMaximizingPlayer) {\r\n      let maxEval = -Infinity;\r\n      for (const move of moves) {\r\n        chess.move(move);\r\n        const eval1 = minimax(chess, depth - 1, alpha, beta, false);\r\n        chess.undo();\r\n        maxEval = Math.max(maxEval, eval1);\r\n        alpha = Math.max(alpha, eval1);\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n      return maxEval;\r\n    } else {\r\n      let minEval = Infinity;\r\n      for (const move of moves) {\r\n        chess.move(move);\r\n        const eval1 = minimax(chess, depth - 1, alpha, beta, true);\r\n        chess.undo();\r\n        minEval = Math.min(minEval, eval1);\r\n        beta = Math.min(beta, eval1);\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n      return minEval;\r\n    }\r\n  };\r\n\r\n  const evaluateBoard = (chess) => {\r\n    const pieces = {\r\n      p: 1,\r\n      n: 3,\r\n      b: 3,\r\n      r: 5,\r\n      q: 9,\r\n      k: 0, // King's value can be set very high to prevent its capture\r\n    };\r\n\r\n    let evaluation = 0;\r\n    const board = chess.board();\r\n    for (const row of board) {\r\n      for (const square of row) {\r\n        if (square) {\r\n          evaluation += pieces[square.type] * (square.color === \"w\" ? 1 : -1);\r\n        }\r\n      }\r\n    }\r\n    return evaluation;\r\n  };\r\n\r\n  const getRandomMoveFromList = (moves) => {\r\n    return moves[Math.floor(Math.random() * moves.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    if (chess.isCheckmate()) {\r\n      setGameOverMessage(\r\n        `Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`\r\n      );\r\n    } else if (chess.isStalemate()) {\r\n      setGameOverMessage(\"Stalemate! It's a draw.\");\r\n    } else if (chess.isDraw()) {\r\n      setGameOverMessage(\"It's a draw.\");\r\n    }\r\n  };\r\n\r\n  const handleSquareClick = (square) => {\r\n    const moves = chess.moves({ square, verbose: true });\r\n\r\n    if (moves.length === 0) {\r\n      setHighlightedSquares({});\r\n      return;\r\n    }\r\n\r\n    const squaresToHighlight = {};\r\n    moves.forEach((move) => {\r\n      squaresToHighlight[move.to] = {\r\n        background: \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\r\n        borderRadius: \"50%\",\r\n      };\r\n    });\r\n    squaresToHighlight[square] = {\r\n      background: \"rgba(255, 255, 0, 0.4)\",\r\n    };\r\n    setHighlightedSquares(squaresToHighlight);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"select-box\">\r\n            <label>\r\n              Choose player color:\r\n              <select value={playerColor} onChange={handlePlayerColorChange}>\r\n                <option value=\"white\">White</option>\r\n                <option value=\"black\">Black</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Choose difficulty:\r\n              <select value={difficulty} onChange={handleDifficultyChange}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-container\">\r\n          <Chessboard\r\n            position={fen}\r\n            orientation={orientation}\r\n            onSquareClick={handleSquareClick}\r\n            onDrop={handleDrop}\r\n            squareStyles={highlightedSquares}\r\n          />\r\n          {showInvalidMovePopup && (\r\n            <div className=\"invalid-move-popup\">\r\n              <div className=\"popup-content\">\r\n                <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                  &times;\r\n                </span>\r\n                <p>Invalid move. Please try again.</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"move-history\">\r\n          <h3>Move History</h3>\r\n          <ul>\r\n            {moveHistory.map((move, index) => (\r\n              <li key={index}>\r\n                {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {gameOverMessage && (\r\n          <div className=\"game-over-message\">\r\n            <p>{gameOverMessage}</p>\r\n          </div>\r\n        )}\r\n        {promotionDialog.show && (\r\n          <div className=\"promotion-dialog\">\r\n            <div className=\"promotion-dialog-content\">\r\n              <h3>Choose Promotion Piece</h3>\r\n              <button onClick={() => handlePromotion(\"q\")}>Queen</button>\r\n              <button onClick={() => handlePromotion(\"r\")}>Rook</button>\r\n              <button onClick={() => handlePromotion(\"b\")}>Bishop</button>\r\n              <button onClick={() => handlePromotion(\"n\")}>Knight</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}