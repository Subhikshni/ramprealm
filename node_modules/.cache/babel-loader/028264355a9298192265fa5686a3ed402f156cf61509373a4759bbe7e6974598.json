{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\");\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\n  const [promotionDialog, setPromotionDialog] = useState({\n    show: false,\n    move: null\n  });\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    if (chess.game_over) return;\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    if (move) {\n      chess.move(move);\n      setFen(chess.fen());\n      updateMoveHistory();\n      checkGameOver();\n    }\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves.length > 0 ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)] : null;\n  };\n  const handleDrop = move => {\n    if (move.sourceSquare === move.targetSquare) return;\n    const moveResult = chess.move({\n      from: move.sourceSquare,\n      to: move.targetSquare\n    });\n    if (moveResult) {\n      if (moveResult.flags.includes(\"p\")) {\n        setPromotionDialog({\n          show: true,\n          move: moveResult\n        });\n      } else {\n        setFen(chess.fen());\n        updateMoveHistory();\n        checkGameOver();\n        setTimeout(makeBotMove, 500);\n      }\n    } else {\n      setShowInvalidMovePopup(true);\n      return \"snapback\";\n    }\n  };\n  const handlePromotion = piece => {\n    const {\n      move\n    } = promotionDialog;\n    chess.undo();\n    chess.move({\n      from: move.from,\n      to: move.to,\n      promotion: piece\n    });\n    setFen(chess.fen());\n    updateMoveHistory();\n    checkGameOver();\n    setPromotionDialog({\n      show: false,\n      move: null\n    });\n    setTimeout(makeBotMove, 500);\n  };\n  const getMediumMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    return getRandomMove(chess);\n  };\n  const getHardMove = chess => {\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => move.captured !== null);\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\n    const centerMoves = chess.moves({\n      verbose: true\n    }).filter(move => centerSquares.includes(move.to));\n    if (centerMoves.length > 0) {\n      return getRandomMoveFromList(centerMoves);\n    }\n    return getRandomMove(chess);\n  };\n  const getRandomMoveFromList = movesList => {\n    return movesList[Math.floor(Math.random() * movesList.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  const checkGameOver = () => {\n    if (chess.isCheckmate()) {\n      setGameOverMessage(`Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chess.isStalemate()) {\n      setGameOverMessage(\"Stalemate! It's a draw.\");\n    } else if (chess.isDraw()) {\n      setGameOverMessage(\"It's a draw.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose player color:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: playerColor,\n              onChange: handlePlayerColorChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"white\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Choose difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: difficulty,\n              onChange: handleDifficultyChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"easy\",\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"medium\",\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hard\",\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          orientation: orientation,\n          onSquareClick: square => {\n            if (chess.turn() !== playerColor[0]) return;\n            const moves = chess.moves({\n              square\n            });\n            if (moves.length === 0) return;\n            const move = moves[0];\n            chess.move(move);\n            setFen(chess.fen());\n            updateMoveHistory();\n            checkGameOver();\n            setTimeout(makeBotMove, 500);\n          },\n          onDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), showInvalidMovePopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-move-popup\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: handleInvalidMovePopupClose,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid move. Please try again.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), gameOverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameOverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), promotionDialog.show && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"promotion-dialog-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Choose Promotion Piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"q\"),\n            children: \"Queen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"r\"),\n            children: \"Rook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"b\"),\n            children: \"Bishop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePromotion(\"n\"),\n            children: \"Knight\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"cXB9GBPscIfqD7Vtf4NX+iRChko=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","gameOverMessage","setGameOverMessage","promotionDialog","setPromotionDialog","show","move","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","game_over","getRandomMove","getMediumMove","getHardMove","updateMoveHistory","checkGameOver","possibleMoves","moves","length","Math","floor","random","handleDrop","sourceSquare","targetSquare","moveResult","from","to","flags","includes","setTimeout","handlePromotion","piece","undo","promotion","captureMoves","verbose","filter","captured","getRandomMoveFromList","centerSquares","centerMoves","movesList","handleInvalidMovePopupClose","history","isCheckmate","turn","isStalemate","isDraw","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","position","onSquareClick","square","onDrop","onClick","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\");\r\n  const [moveHistory, setMoveHistory] = useState([]);\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\r\n  const [promotionDialog, setPromotionDialog] = useState({\r\n    show: false,\r\n    move: null,\r\n  });\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    if (chess.game_over) return;\r\n\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    if (move) {\r\n      chess.move(move);\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      checkGameOver();\r\n    }\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves.length > 0\r\n      ? possibleMoves[Math.floor(Math.random() * possibleMoves.length)]\r\n      : null;\r\n  };\r\n\r\n  const handleDrop = (move) => {\r\n    if (move.sourceSquare === move.targetSquare) return;\r\n\r\n    const moveResult = chess.move({\r\n      from: move.sourceSquare,\r\n      to: move.targetSquare,\r\n    });\r\n\r\n    if (moveResult) {\r\n      if (moveResult.flags.includes(\"p\")) {\r\n        setPromotionDialog({ show: true, move: moveResult });\r\n      } else {\r\n        setFen(chess.fen());\r\n        updateMoveHistory();\r\n        checkGameOver();\r\n        setTimeout(makeBotMove, 500);\r\n      }\r\n    } else {\r\n      setShowInvalidMovePopup(true);\r\n      return \"snapback\";\r\n    }\r\n  };\r\n\r\n  const handlePromotion = (piece) => {\r\n    const { move } = promotionDialog;\r\n    chess.undo();\r\n    chess.move({\r\n      from: move.from,\r\n      to: move.to,\r\n      promotion: piece,\r\n    });\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n    checkGameOver();\r\n    setPromotionDialog({ show: false, move: null });\r\n    setTimeout(makeBotMove, 500);\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    const captureMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => move.captured !== null);\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\r\n    const centerMoves = chess\r\n      .moves({ verbose: true })\r\n      .filter((move) => centerSquares.includes(move.to));\r\n    if (centerMoves.length > 0) {\r\n      return getRandomMoveFromList(centerMoves);\r\n    }\r\n\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getRandomMoveFromList = (movesList) => {\r\n    return movesList[Math.floor(Math.random() * movesList.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    if (chess.isCheckmate()) {\r\n      setGameOverMessage(\r\n        `Checkmate! ${chess.turn() === \"w\" ? \"Black\" : \"White\"} wins.`\r\n      );\r\n    } else if (chess.isStalemate()) {\r\n      setGameOverMessage(\"Stalemate! It's a draw.\");\r\n    } else if (chess.isDraw()) {\r\n      setGameOverMessage(\"It's a draw.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"chessbot-container\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"select-box\">\r\n            <label>\r\n              Choose player color:\r\n              <select value={playerColor} onChange={handlePlayerColorChange}>\r\n                <option value=\"white\">White</option>\r\n                <option value=\"black\">Black</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Choose difficulty:\r\n              <select value={difficulty} onChange={handleDifficultyChange}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"board-container\">\r\n          <Chessboard\r\n            position={fen}\r\n            orientation={orientation}\r\n            onSquareClick={(square) => {\r\n              if (chess.turn() !== playerColor[0]) return;\r\n\r\n              const moves = chess.moves({ square });\r\n\r\n              if (moves.length === 0) return;\r\n\r\n              const move = moves[0];\r\n              chess.move(move);\r\n              setFen(chess.fen());\r\n              updateMoveHistory();\r\n              checkGameOver();\r\n              setTimeout(makeBotMove, 500);\r\n            }}\r\n            onDrop={handleDrop}\r\n          />\r\n          {showInvalidMovePopup && (\r\n            <div className=\"invalid-move-popup\">\r\n              <div className=\"popup-content\">\r\n                <span className=\"close\" onClick={handleInvalidMovePopupClose}>\r\n                  &times;\r\n                </span>\r\n                <p>Invalid move. Please try again.</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"move-history\">\r\n          <h3>Move History</h3>\r\n          <ul>\r\n            {moveHistory.map((move, index) => (\r\n              <li key={index}>\r\n                {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {gameOverMessage && (\r\n          <div className=\"game-over-message\">\r\n            <p>{gameOverMessage}</p>\r\n          </div>\r\n        )}\r\n        {promotionDialog.show && (\r\n          <div className=\"promotion-dialog\">\r\n            <div className=\"promotion-dialog-content\">\r\n              <h3>Choose Promotion Piece</h3>\r\n              <button onClick={() => handlePromotion(\"q\")}>Queen</button>\r\n              <button onClick={() => handlePromotion(\"r\")}>Rook</button>\r\n              <button onClick={() => handlePromotion(\"b\")}>Bishop</button>\r\n              <button onClick={() => handlePromotion(\"n\")}>Knight</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}