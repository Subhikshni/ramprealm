{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\");\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\n  const [promotionDialog, setPromotionDialog] = useState({\n    show: false,\n    move: null\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState({});\n  const [engineMove, setEngineMove] = useState(\"\"); // State to store the move suggested by the engine\n\n  useEffect(() => {\n    if (playerColor === \"black\" && chess.turn() === \"b\") {\n      setTimeout(makeBotMove, 500);\n    }\n  }, [playerColor, chess]);\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n    if (selectedColor === \"black\" && chess.turn() === \"b\") {\n      setTimeout(makeBotMove, 500); // Allow some time for the UI to update\n    }\n  };\n  const makeBotMove = async () => {\n    if (chess.isGameOver()) return;\n    let depth;\n    switch (difficulty) {\n      case \"easy\":\n        depth = 5; // Lower depth for easier difficulty\n        break;\n      case \"medium\":\n        depth = 10;\n        break;\n      case \"hard\":\n        depth = 15; // Higher depth for harder difficulty\n        break;\n      default:\n        depth = 5;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5002/chess/move\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fen: chess.fen(),\n          depth\n        })\n      });\n      const data = await response.json();\n      if (data.engineOutput) {\n        const bestMove = data.engineOutput.trim(); // Assuming the output is the best move in UCI format\n        chess.move({\n          from: bestMove.substring(0, 2),\n          to: bestMove.substring(2, 4),\n          promotion: bestMove[4] // Handle promotion if any\n        });\n        setFen(chess.fen());\n        setEngineMove(bestMove);\n        updateMoveHistory();\n        checkGameOver();\n      }\n    } catch (error) {\n      console.error(\"Error fetching move from Sunfish:\", error);\n    }\n  };\n\n  // Rest of the component code remains the same\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n_s(ChessBot, \"mVkl72zg43Qx+fMvWmhSF/5syS0=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","gameOverMessage","setGameOverMessage","promotionDialog","setPromotionDialog","show","move","highlightedSquares","setHighlightedSquares","engineMove","setEngineMove","turn","setTimeout","makeBotMove","handlePlayerColorChange","e","selectedColor","target","value","isGameOver","depth","response","fetch","method","headers","body","JSON","stringify","data","json","engineOutput","bestMove","trim","from","substring","to","promotion","updateMoveHistory","checkGameOver","error","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\");\r\n  const [moveHistory, setMoveHistory] = useState([]);\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\r\n  const [promotionDialog, setPromotionDialog] = useState({\r\n    show: false,\r\n    move: null,\r\n  });\r\n  const [highlightedSquares, setHighlightedSquares] = useState({});\r\n  const [engineMove, setEngineMove] = useState(\"\"); // State to store the move suggested by the engine\r\n\r\n  useEffect(() => {\r\n    if (playerColor === \"black\" && chess.turn() === \"b\") {\r\n      setTimeout(makeBotMove, 500);\r\n    }\r\n  }, [playerColor, chess]);\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    if (selectedColor === \"black\" && chess.turn() === \"b\") {\r\n      setTimeout(makeBotMove, 500); // Allow some time for the UI to update\r\n    }\r\n  };\r\n\r\n  const makeBotMove = async () => {\r\n    if (chess.isGameOver()) return;\r\n\r\n    let depth;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        depth = 5; // Lower depth for easier difficulty\r\n        break;\r\n      case \"medium\":\r\n        depth = 10;\r\n        break;\r\n      case \"hard\":\r\n        depth = 15; // Higher depth for harder difficulty\r\n        break;\r\n      default:\r\n        depth = 5;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5002/chess/move\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ fen: chess.fen(), depth }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.engineOutput) {\r\n        const bestMove = data.engineOutput.trim(); // Assuming the output is the best move in UCI format\r\n        chess.move({\r\n          from: bestMove.substring(0, 2),\r\n          to: bestMove.substring(2, 4),\r\n          promotion: bestMove[4], // Handle promotion if any\r\n        });\r\n        setFen(chess.fen());\r\n        setEngineMove(bestMove);\r\n        updateMoveHistory();\r\n        checkGameOver();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching move from Sunfish:\", error);\r\n    }\r\n  };\r\n\r\n  // Rest of the component code remains the same\r\n\r\n  return <div>{/* Your JSX content */}</div>;\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,CAAC,GAAGT,QAAQ,CAAC,IAAIG,KAAK,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,QAAQ,CAAC;EACtD,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAACS,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwB,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC;IACrD0B,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACd,IAAIS,WAAW,KAAK,OAAO,IAAID,KAAK,CAACuB,IAAI,CAAC,CAAC,KAAK,GAAG,EAAE;MACnDC,UAAU,CAACC,WAAW,EAAE,GAAG,CAAC;IAC9B;EACF,CAAC,EAAE,CAACxB,WAAW,EAAED,KAAK,CAAC,CAAC;EAExB,MAAM0B,uBAAuB,GAAIC,CAAC,IAAK;IACrC,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACpC5B,cAAc,CAAC0B,aAAa,CAAC;IAC7BlB,cAAc,CAACkB,aAAa,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;IAE7D,IAAIA,aAAa,KAAK,OAAO,IAAI5B,KAAK,CAACuB,IAAI,CAAC,CAAC,KAAK,GAAG,EAAE;MACrDC,UAAU,CAACC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;IAChC;EACF,CAAC;EAED,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIzB,KAAK,CAAC+B,UAAU,CAAC,CAAC,EAAE;IAExB,IAAIC,KAAK;IACT,QAAQ7B,UAAU;MAChB,KAAK,MAAM;QACT6B,KAAK,GAAG,CAAC,CAAC,CAAC;QACX;MACF,KAAK,QAAQ;QACXA,KAAK,GAAG,EAAE;QACV;MACF,KAAK,MAAM;QACTA,KAAK,GAAG,EAAE,CAAC,CAAC;QACZ;MACF;QACEA,KAAK,GAAG,CAAC;IACb;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElC,GAAG,EAAEL,KAAK,CAACK,GAAG,CAAC,CAAC;UAAE2B;QAAM,CAAC;MAClD,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,YAAY,EAAE;QACrB,MAAMC,QAAQ,GAAGH,IAAI,CAACE,YAAY,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C5C,KAAK,CAACkB,IAAI,CAAC;UACT2B,IAAI,EAAEF,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;UAC9BC,EAAE,EAAEJ,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5BE,SAAS,EAAEL,QAAQ,CAAC,CAAC,CAAC,CAAE;QAC1B,CAAC,CAAC;QACFrC,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;QACnBiB,aAAa,CAACqB,QAAQ,CAAC;QACvBM,iBAAiB,CAAC,CAAC;QACnBC,aAAa,CAAC,CAAC;MACjB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;;EAED;;EAEA,oBAAOtD,OAAA;IAAAwD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAkC,CAAC;AAC5C,CAAC;AAACzD,EAAA,CAhFID,QAAQ;AAAA2D,EAAA,GAAR3D,QAAQ;AAkFd,eAAeA,QAAQ;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}