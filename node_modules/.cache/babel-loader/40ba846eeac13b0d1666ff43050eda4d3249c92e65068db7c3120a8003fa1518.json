{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport NavBar2 from \"./NavBar2\";\nimport \"../css/chessbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const [difficulty, setDifficulty] = useState(\"medium\");\n  const [fen, setFen] = useState(chess.fen());\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\n\n  const handlePlayerColorChange = e => {\n    const selectedColor = e.target.value;\n    setPlayerColor(selectedColor);\n    // If the player selects black, flip the board orientation\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\n\n    // If the player selects black, make the bot's first move\n    if (selectedColor === \"black\") {\n      makeBotMove();\n    }\n  };\n  const handleDifficultyChange = e => {\n    setDifficulty(e.target.value);\n  };\n  const makeBotMove = () => {\n    // Implement bot move logic based on the selected difficulty\n    let move;\n    switch (difficulty) {\n      case \"easy\":\n        move = getRandomMove(chess);\n        break;\n      case \"medium\":\n        move = getMediumMove(chess);\n        break;\n      case \"hard\":\n        move = getHardMove(chess);\n        break;\n      default:\n        move = getRandomMove(chess);\n    }\n    chess.move(move);\n    setFen(chess.fen());\n    updateMoveHistory();\n  };\n  const getRandomMove = chess => {\n    const possibleMoves = chess.moves();\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n  };\n  const handleDrop = (sourceSquare, targetSquare) => {\n    let move = {\n      from: sourceSquare,\n      to: targetSquare\n    };\n\n    // Check if the move is a promotion\n    const piece = chess.get(sourceSquare);\n    const isPromotion = piece.type === \"p\" && (targetSquare[1] === \"8\" || targetSquare[1] === \"1\");\n    if (isPromotion) {\n      // For simplicity, promote to queen by default\n      move.promotion = \"q\";\n    }\n    const moveResult = chess.move(move);\n    if (moveResult) {\n      setFen(chess.fen());\n      updateMoveHistory();\n      setTimeout(makeBotMove, 500);\n    } else {\n      alert(\"Invalid move\");\n    }\n  };\n  const getMediumMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getHardMove = chess => {\n    // Prioritize capturing opponent's pieces if available\n    const captureMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return move.captured !== null;\n    });\n    if (captureMoves.length > 0) {\n      return getRandomMoveFromList(captureMoves);\n    }\n\n    // If no capturing moves available, prioritize controlling the center\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\n    const centerMoves = chess.moves({\n      verbose: true\n    }).filter(move => {\n      return centerSquares.includes(move.to);\n    });\n    if (centerMoves.length > 0) {\n      return getRandomMoveFromList(centerMoves);\n    }\n\n    // If no center moves available, make a random move\n    return getRandomMove(chess);\n  };\n  const getRandomMoveFromList = movesList => {\n    return movesList[Math.floor(Math.random() * movesList.length)];\n  };\n  const handleInvalidMovePopupClose = () => {\n    setShowInvalidMovePopup(false);\n  };\n  const updateMoveHistory = () => {\n    const history = chess.history({\n      verbose: true\n    });\n    setMoveHistory(history);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: fen,\n        onDrop: (source, target) => handleDrop(source, target)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"move-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Move History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [index % 2 === 0 ? \"White\" : \"Black\", \": \", move.san]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"zfTIY9dS8lM/yQ0C5X7BVnHePdc=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","NavBar2","jsxDEV","_jsxDEV","ChessBot","_s","chess","playerColor","setPlayerColor","difficulty","setDifficulty","fen","setFen","showInvalidMovePopup","setShowInvalidMovePopup","orientation","setOrientation","moveHistory","setMoveHistory","handlePlayerColorChange","e","selectedColor","target","value","makeBotMove","handleDifficultyChange","move","getRandomMove","getMediumMove","getHardMove","updateMoveHistory","possibleMoves","moves","Math","floor","random","length","handleDrop","sourceSquare","targetSquare","from","to","piece","get","isPromotion","type","promotion","moveResult","setTimeout","alert","captureMoves","verbose","filter","captured","getRandomMoveFromList","centerSquares","centerMoves","includes","movesList","handleInvalidMovePopupClose","history","children","fileName","_jsxFileName","lineNumber","columnNumber","className","position","onDrop","source","map","index","san","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport NavBar2 from \"./NavBar2\";\r\nimport \"../css/chessbot.css\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const [difficulty, setDifficulty] = useState(\"medium\");\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [showInvalidMovePopup, setShowInvalidMovePopup] = useState(false);\r\n  const [orientation, setOrientation] = useState(\"white\"); // Added state for board orientation\r\n  const [moveHistory, setMoveHistory] = useState([]); // Added state for move history\r\n\r\n  const handlePlayerColorChange = (e) => {\r\n    const selectedColor = e.target.value;\r\n    setPlayerColor(selectedColor);\r\n    // If the player selects black, flip the board orientation\r\n    setOrientation(selectedColor === \"black\" ? \"black\" : \"white\");\r\n\r\n    // If the player selects black, make the bot's first move\r\n    if (selectedColor === \"black\") {\r\n      makeBotMove();\r\n    }\r\n  };\r\n\r\n  const handleDifficultyChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const makeBotMove = () => {\r\n    // Implement bot move logic based on the selected difficulty\r\n    let move;\r\n    switch (difficulty) {\r\n      case \"easy\":\r\n        move = getRandomMove(chess);\r\n        break;\r\n      case \"medium\":\r\n        move = getMediumMove(chess);\r\n        break;\r\n      case \"hard\":\r\n        move = getHardMove(chess);\r\n        break;\r\n      default:\r\n        move = getRandomMove(chess);\r\n    }\r\n\r\n    chess.move(move);\r\n    setFen(chess.fen());\r\n    updateMoveHistory();\r\n  };\r\n\r\n  const getRandomMove = (chess) => {\r\n    const possibleMoves = chess.moves();\r\n    return possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n  };\r\n\r\n  const handleDrop = (sourceSquare, targetSquare) => {\r\n    let move = {\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n    };\r\n\r\n    // Check if the move is a promotion\r\n    const piece = chess.get(sourceSquare);\r\n    const isPromotion =\r\n      piece.type === \"p\" &&\r\n      (targetSquare[1] === \"8\" || targetSquare[1] === \"1\");\r\n\r\n    if (isPromotion) {\r\n      // For simplicity, promote to queen by default\r\n      move.promotion = \"q\";\r\n    }\r\n\r\n    const moveResult = chess.move(move);\r\n\r\n    if (moveResult) {\r\n      setFen(chess.fen());\r\n      updateMoveHistory();\r\n      setTimeout(makeBotMove, 500);\r\n    } else {\r\n      alert(\"Invalid move\");\r\n    }\r\n  };\r\n\r\n  const getMediumMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getHardMove = (chess) => {\r\n    // Prioritize capturing opponent's pieces if available\r\n    const captureMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return move.captured !== null;\r\n    });\r\n    if (captureMoves.length > 0) {\r\n      return getRandomMoveFromList(captureMoves);\r\n    }\r\n\r\n    // If no capturing moves available, prioritize controlling the center\r\n    const centerSquares = [\"d4\", \"e4\", \"d5\", \"e5\"];\r\n    const centerMoves = chess.moves({ verbose: true }).filter((move) => {\r\n      return centerSquares.includes(move.to);\r\n    });\r\n    if (centerMoves.length > 0) {\r\n      return getRandomMoveFromList(centerMoves);\r\n    }\r\n\r\n    // If no center moves available, make a random move\r\n    return getRandomMove(chess);\r\n  };\r\n\r\n  const getRandomMoveFromList = (movesList) => {\r\n    return movesList[Math.floor(Math.random() * movesList.length)];\r\n  };\r\n\r\n  const handleInvalidMovePopupClose = () => {\r\n    setShowInvalidMovePopup(false);\r\n  };\r\n\r\n  const updateMoveHistory = () => {\r\n    const history = chess.history({ verbose: true });\r\n    setMoveHistory(history);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar2 />\r\n      <div className=\"board-container\">\r\n        <Chessboard\r\n          position={fen}\r\n          onDrop={(source, target) => handleDrop(source, target)}\r\n        />\r\n      </div>\r\n      <div className=\"move-history\">\r\n        <h3>Move History</h3>\r\n        <ul>\r\n          {moveHistory.map((move, index) => (\r\n            <li key={index}>\r\n              {index % 2 === 0 ? \"White\" : \"Black\"}: {move.san}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ChessBot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,CAAC,GAAGR,QAAQ,CAAC,IAAIE,KAAK,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC;EACtD,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAACQ,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACzD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD,MAAMqB,uBAAuB,GAAIC,CAAC,IAAK;IACrC,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACpCf,cAAc,CAACa,aAAa,CAAC;IAC7B;IACAL,cAAc,CAACK,aAAa,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;;IAE7D;IACA,IAAIA,aAAa,KAAK,OAAO,EAAE;MAC7BG,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMC,sBAAsB,GAAIL,CAAC,IAAK;IACpCV,aAAa,CAACU,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,IAAIE,IAAI;IACR,QAAQjB,UAAU;MAChB,KAAK,MAAM;QACTiB,IAAI,GAAGC,aAAa,CAACrB,KAAK,CAAC;QAC3B;MACF,KAAK,QAAQ;QACXoB,IAAI,GAAGE,aAAa,CAACtB,KAAK,CAAC;QAC3B;MACF,KAAK,MAAM;QACToB,IAAI,GAAGG,WAAW,CAACvB,KAAK,CAAC;QACzB;MACF;QACEoB,IAAI,GAAGC,aAAa,CAACrB,KAAK,CAAC;IAC/B;IAEAA,KAAK,CAACoB,IAAI,CAACA,IAAI,CAAC;IAChBd,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;IACnBmB,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAED,MAAMH,aAAa,GAAIrB,KAAK,IAAK;IAC/B,MAAMyB,aAAa,GAAGzB,KAAK,CAAC0B,KAAK,CAAC,CAAC;IACnC,OAAOD,aAAa,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,aAAa,CAACK,MAAM,CAAC,CAAC;EACxE,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACC,YAAY,EAAEC,YAAY,KAAK;IACjD,IAAIb,IAAI,GAAG;MACTc,IAAI,EAAEF,YAAY;MAClBG,EAAE,EAAEF;IACN,CAAC;;IAED;IACA,MAAMG,KAAK,GAAGpC,KAAK,CAACqC,GAAG,CAACL,YAAY,CAAC;IACrC,MAAMM,WAAW,GACfF,KAAK,CAACG,IAAI,KAAK,GAAG,KACjBN,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IAEtD,IAAIK,WAAW,EAAE;MACf;MACAlB,IAAI,CAACoB,SAAS,GAAG,GAAG;IACtB;IAEA,MAAMC,UAAU,GAAGzC,KAAK,CAACoB,IAAI,CAACA,IAAI,CAAC;IAEnC,IAAIqB,UAAU,EAAE;MACdnC,MAAM,CAACN,KAAK,CAACK,GAAG,CAAC,CAAC,CAAC;MACnBmB,iBAAiB,CAAC,CAAC;MACnBkB,UAAU,CAACxB,WAAW,EAAE,GAAG,CAAC;IAC9B,CAAC,MAAM;MACLyB,KAAK,CAAC,cAAc,CAAC;IACvB;EACF,CAAC;EAED,MAAMrB,aAAa,GAAItB,KAAK,IAAK;IAC/B;IACA,MAAM4C,YAAY,GAAG5C,KAAK,CAAC0B,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC,CAACC,MAAM,CAAE1B,IAAI,IAAK;MACnE,OAAOA,IAAI,CAAC2B,QAAQ,KAAK,IAAI;IAC/B,CAAC,CAAC;IACF,IAAIH,YAAY,CAACd,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAOkB,qBAAqB,CAACJ,YAAY,CAAC;IAC5C;;IAEA;IACA,OAAOvB,aAAa,CAACrB,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMuB,WAAW,GAAIvB,KAAK,IAAK;IAC7B;IACA,MAAM4C,YAAY,GAAG5C,KAAK,CAAC0B,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC,CAACC,MAAM,CAAE1B,IAAI,IAAK;MACnE,OAAOA,IAAI,CAAC2B,QAAQ,KAAK,IAAI;IAC/B,CAAC,CAAC;IACF,IAAIH,YAAY,CAACd,MAAM,GAAG,CAAC,EAAE;MAC3B,OAAOkB,qBAAqB,CAACJ,YAAY,CAAC;IAC5C;;IAEA;IACA,MAAMK,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9C,MAAMC,WAAW,GAAGlD,KAAK,CAAC0B,KAAK,CAAC;MAAEmB,OAAO,EAAE;IAAK,CAAC,CAAC,CAACC,MAAM,CAAE1B,IAAI,IAAK;MAClE,OAAO6B,aAAa,CAACE,QAAQ,CAAC/B,IAAI,CAACe,EAAE,CAAC;IACxC,CAAC,CAAC;IACF,IAAIe,WAAW,CAACpB,MAAM,GAAG,CAAC,EAAE;MAC1B,OAAOkB,qBAAqB,CAACE,WAAW,CAAC;IAC3C;;IAEA;IACA,OAAO7B,aAAa,CAACrB,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMgD,qBAAqB,GAAII,SAAS,IAAK;IAC3C,OAAOA,SAAS,CAACzB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGuB,SAAS,CAACtB,MAAM,CAAC,CAAC;EAChE,CAAC;EAED,MAAMuB,2BAA2B,GAAGA,CAAA,KAAM;IACxC7C,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMgB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAM8B,OAAO,GAAGtD,KAAK,CAACsD,OAAO,CAAC;MAAET,OAAO,EAAE;IAAK,CAAC,CAAC;IAChDjC,cAAc,CAAC0C,OAAO,CAAC;EACzB,CAAC;EAED,oBACEzD,OAAA;IAAA0D,QAAA,gBACE1D,OAAA,CAACF,OAAO;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACX9D,OAAA;MAAK+D,SAAS,EAAC,iBAAiB;MAAAL,QAAA,eAC9B1D,OAAA,CAACJ,UAAU;QACToE,QAAQ,EAAExD,GAAI;QACdyD,MAAM,EAAEA,CAACC,MAAM,EAAE/C,MAAM,KAAKe,UAAU,CAACgC,MAAM,EAAE/C,MAAM;MAAE;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN9D,OAAA;MAAK+D,SAAS,EAAC,cAAc;MAAAL,QAAA,gBAC3B1D,OAAA;QAAA0D,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB9D,OAAA;QAAA0D,QAAA,EACG5C,WAAW,CAACqD,GAAG,CAAC,CAAC5C,IAAI,EAAE6C,KAAK,kBAC3BpE,OAAA;UAAA0D,QAAA,GACGU,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO,EAAC,IAAE,EAAC7C,IAAI,CAAC8C,GAAG;QAAA,GADzCD,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5D,EAAA,CArJID,QAAQ;AAAAqE,EAAA,GAARrE,QAAQ;AAsJd,eAAeA,QAAQ;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}