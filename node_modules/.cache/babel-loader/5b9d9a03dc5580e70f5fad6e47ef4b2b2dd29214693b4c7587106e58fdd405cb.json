{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\"; // Updated import statement\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChessBot {\n  constructor() {\n    this.engineColor = \"black\"; // Default engine color\n    this.engineLevel = 3; // Default engine level (difficulty)\n    this.engine = new Chess();\n  }\n\n  // Set the color of the engine\n  setEngineColor(color) {\n    this.engineColor = color;\n  }\n\n  // Set the level (difficulty) of the engine\n  setEngineLevel(level) {\n    this.engineLevel = level;\n  }\n\n  // Make a move for the engine\n  makeEngineMove() {\n    if (this.engine.turn() !== this.engineColor || this.engine.game_over()) {\n      return null;\n    }\n    let legalMoves = this.engine.moves();\n    let move = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n    this.engine.move(move);\n    return move;\n  }\n\n  // Make a move for the human player\n  makeHumanMove(from, to) {\n    let move = this.engine.move({\n      from: from,\n      to: to,\n      promotion: \"q\" // promote to queen for simplicity\n    });\n    return move;\n  }\n\n  // Get the current board state\n  getBoard() {\n    return this.engine.fen();\n  }\n\n  // Reset the game\n  resetGame() {\n    this.engine.reset();\n  }\n}\nconst ChessBotApp = () => {\n  _s();\n  const [fen, setFen] = useState(\"start\");\n  const [gameOver, setGameOver] = useState(false);\n  const [playerColor, setPlayerColor] = useState(\"white\");\n  const chessBot = new ChessBot();\n\n  // Function to handle when a move is made by the player\n  const handleMove = ({\n    from,\n    to\n  }) => {\n    const move = chessBot.makeHumanMove(from, to);\n    if (move) {\n      const engineMove = chessBot.makeEngineMove();\n      if (engineMove) {\n        setFen(chessBot.getBoard());\n        setGameOver(chessBot.engine.game_over());\n      }\n    }\n  };\n\n  // Function to handle when the player chooses their color\n  const chooseColor = color => {\n    setPlayerColor(color);\n    chessBot.setEngineColor(color === \"white\" ? \"black\" : \"white\");\n  };\n\n  // Function to start a new game\n  const newGame = () => {\n    chessBot.resetGame();\n    setFen(\"start\");\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      width: 400,\n      position: fen,\n      onDrop: handleMove,\n      orientation: playerColor,\n      dropOffBoard: \"snapback\",\n      allowDrag: () => !gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => chooseColor(\"white\"),\n        children: \"Play as White\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => chooseColor(\"black\"),\n        children: \"Play as Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBotApp, \"qfNSu4qRnb3dBv/sg1K3PfU2oG8=\");\n_c = ChessBotApp;\nexport default ChessBotApp;\nvar _c;\n$RefreshReg$(_c, \"ChessBotApp\");","map":{"version":3,"names":["React","useState","ReactDOM","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBot","constructor","engineColor","engineLevel","engine","setEngineColor","color","setEngineLevel","level","makeEngineMove","turn","game_over","legalMoves","moves","move","Math","floor","random","length","makeHumanMove","from","to","promotion","getBoard","fen","resetGame","reset","ChessBotApp","_s","setFen","gameOver","setGameOver","playerColor","setPlayerColor","chessBot","handleMove","engineMove","chooseColor","newGame","children","width","position","onDrop","orientation","dropOffBoard","allowDrag","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\"; // Updated import statement\r\n\r\nclass ChessBot {\r\n  constructor() {\r\n    this.engineColor = \"black\"; // Default engine color\r\n    this.engineLevel = 3; // Default engine level (difficulty)\r\n    this.engine = new Chess();\r\n  }\r\n\r\n  // Set the color of the engine\r\n  setEngineColor(color) {\r\n    this.engineColor = color;\r\n  }\r\n\r\n  // Set the level (difficulty) of the engine\r\n  setEngineLevel(level) {\r\n    this.engineLevel = level;\r\n  }\r\n\r\n  // Make a move for the engine\r\n  makeEngineMove() {\r\n    if (this.engine.turn() !== this.engineColor || this.engine.game_over()) {\r\n      return null;\r\n    }\r\n\r\n    let legalMoves = this.engine.moves();\r\n    let move = legalMoves[Math.floor(Math.random() * legalMoves.length)];\r\n    this.engine.move(move);\r\n    return move;\r\n  }\r\n\r\n  // Make a move for the human player\r\n  makeHumanMove(from, to) {\r\n    let move = this.engine.move({\r\n      from: from,\r\n      to: to,\r\n      promotion: \"q\", // promote to queen for simplicity\r\n    });\r\n\r\n    return move;\r\n  }\r\n\r\n  // Get the current board state\r\n  getBoard() {\r\n    return this.engine.fen();\r\n  }\r\n\r\n  // Reset the game\r\n  resetGame() {\r\n    this.engine.reset();\r\n  }\r\n}\r\n\r\nconst ChessBotApp = () => {\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [playerColor, setPlayerColor] = useState(\"white\");\r\n  const chessBot = new ChessBot();\r\n\r\n  // Function to handle when a move is made by the player\r\n  const handleMove = ({ from, to }) => {\r\n    const move = chessBot.makeHumanMove(from, to);\r\n    if (move) {\r\n      const engineMove = chessBot.makeEngineMove();\r\n      if (engineMove) {\r\n        setFen(chessBot.getBoard());\r\n        setGameOver(chessBot.engine.game_over());\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to handle when the player chooses their color\r\n  const chooseColor = (color) => {\r\n    setPlayerColor(color);\r\n    chessBot.setEngineColor(color === \"white\" ? \"black\" : \"white\");\r\n  };\r\n\r\n  // Function to start a new game\r\n  const newGame = () => {\r\n    chessBot.resetGame();\r\n    setFen(\"start\");\r\n    setGameOver(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Chessboard\r\n        width={400}\r\n        position={fen}\r\n        onDrop={handleMove}\r\n        orientation={playerColor}\r\n        dropOffBoard=\"snapback\"\r\n        allowDrag={() => !gameOver}\r\n      />\r\n      <div>\r\n        <button onClick={() => chooseColor(\"white\")}>Play as White</button>\r\n        <button onClick={() => chooseColor(\"black\")}>Play as Black</button>\r\n        <button onClick={newGame}>New Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBotApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}