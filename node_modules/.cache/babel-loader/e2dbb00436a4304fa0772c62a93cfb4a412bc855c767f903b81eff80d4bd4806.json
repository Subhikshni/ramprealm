{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [chess] = useState(new Chess());\n  const [fen, setFen] = useState(chess.fen());\n  const [history, setHistory] = useState([]);\n  const [stockfish, setStockfish] = useState(null); // Define stockfish using useState\n\n  useEffect(() => {\n    // Load Stockfish from CDN\n    const stockfishWorker = new Worker(\"https://cdn.jsdelivr.net/npm/stockfish/src/stockfish.js\");\n\n    // Start Stockfish\n    stockfishWorker.postMessage(\"uci\");\n    stockfishWorker.postMessage(\"ucinewgame\");\n\n    // Event listener for Stockfish's response\n    stockfishWorker.onmessage = event => {\n      const message = event.data;\n      if (message.startsWith(\"bestmove\")) {\n        const bestMove = message.split(\" \")[1];\n        chess.move(bestMove);\n        setFen(chess.fen());\n        setHistory([...chess.history()]);\n      }\n    };\n\n    // Set the stockfish variable using setState\n    setStockfish(stockfishWorker);\n    return () => {\n      stockfishWorker.terminate(); // Terminate Stockfish when component unmounts\n    };\n  }, [chess]);\n  const handleMove = move => {\n    if (chess.move(move)) {\n      setFen(chess.fen());\n      setHistory([...chess.history()]);\n      // Let Stockfish make its move\n      stockfish.postMessage(`position fen ${chess.fen()}`);\n      stockfish.postMessage(\"go depth 10\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: move => handleMove({\n        from: move.sourceSquare,\n        to: move.targetSquare\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Move History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: history.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: move\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"ki481WYJBq/d+6gSOy8kFro8ow4=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBot","_s","chess","fen","setFen","history","setHistory","stockfish","setStockfish","stockfishWorker","Worker","postMessage","onmessage","event","message","data","startsWith","bestMove","split","move","terminate","handleMove","children","position","onDrop","from","sourceSquare","to","targetSquare","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\n\r\nconst ChessBot = () => {\r\n  const [chess] = useState(new Chess());\r\n  const [fen, setFen] = useState(chess.fen());\r\n  const [history, setHistory] = useState([]);\r\n  const [stockfish, setStockfish] = useState(null); // Define stockfish using useState\r\n\r\n  useEffect(() => {\r\n    // Load Stockfish from CDN\r\n    const stockfishWorker = new Worker(\r\n      \"https://cdn.jsdelivr.net/npm/stockfish/src/stockfish.js\"\r\n    );\r\n\r\n    // Start Stockfish\r\n    stockfishWorker.postMessage(\"uci\");\r\n    stockfishWorker.postMessage(\"ucinewgame\");\r\n\r\n    // Event listener for Stockfish's response\r\n    stockfishWorker.onmessage = (event) => {\r\n      const message = event.data;\r\n      if (message.startsWith(\"bestmove\")) {\r\n        const bestMove = message.split(\" \")[1];\r\n        chess.move(bestMove);\r\n        setFen(chess.fen());\r\n        setHistory([...chess.history()]);\r\n      }\r\n    };\r\n\r\n    // Set the stockfish variable using setState\r\n    setStockfish(stockfishWorker);\r\n\r\n    return () => {\r\n      stockfishWorker.terminate(); // Terminate Stockfish when component unmounts\r\n    };\r\n  }, [chess]);\r\n\r\n  const handleMove = (move) => {\r\n    if (chess.move(move)) {\r\n      setFen(chess.fen());\r\n      setHistory([...chess.history()]);\r\n      // Let Stockfish make its move\r\n      stockfish.postMessage(`position fen ${chess.fen()}`);\r\n      stockfish.postMessage(\"go depth 10\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Chessboard\r\n        position={fen}\r\n        onDrop={(move) =>\r\n          handleMove({ from: move.sourceSquare, to: move.targetSquare })\r\n        }\r\n      />\r\n      <div>\r\n        <h2>Move History</h2>\r\n        <ul>\r\n          {history.map((move, index) => (\r\n            <li key={index}>{move}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}