{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 2\\\\peerhealhaven\\\\src\\\\components\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Navbar2 from \"./NavBar2\";\nimport \"../css/MoodTracker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodTracker() {\n  _s();\n  const [profile, setProfile] = useState(\"\");\n  const [anger, setAnger] = useState(\"\");\n  const [sadness, setSadness] = useState(\"\");\n  const [happiness, setHappiness] = useState(\"\");\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    // Store mood tracks for the day\n    const moodTrack = {\n      date: new Date().toLocaleDateString(),\n      anger: parseInt(anger),\n      sadness: parseInt(sadness),\n      happiness: parseInt(happiness)\n    };\n\n    // You can implement logic to store the mood track data in a database or state management system\n    console.log(\"Mood tracked successfully!\", moodTrack);\n\n    // Reset form fields\n    setProfile(\"\");\n    setAnger(\"\");\n    setSadness(\"\");\n    setHappiness(\"\");\n  };\n\n  // Function to provide advice based on mood control capability\n  const provideAdvice = () => {\n    let advice = \"\";\n    if (parseInt(anger) > 7) {\n      advice += \"You seem to have high levels of anger. Try practicing deep breathing exercises or meditation to manage it.\\n\";\n    }\n    if (parseInt(sadness) > 7) {\n      advice += \"Feeling sad? Consider talking to someone you trust or engaging in activities that bring you joy.\\n\";\n    }\n    if (parseInt(happiness) < 5) {\n      advice += \"If you're struggling to find happiness, try focusing on things you're grateful for and doing activities you enjoy.\\n\";\n    }\n    if (advice === \"\") {\n      advice = \"Keep up the good work! You're doing great!\";\n    } else {\n      advice += \"Remember, it's okay to seek help if you need it.\";\n    }\n    alert(advice);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mood Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"profile\",\n          children: \"Profile Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"profile\",\n          value: profile,\n          onChange: e => setProfile(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"anger\",\n          children: \"Anger Control (1-10):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"anger\",\n          min: \"1\",\n          max: \"10\",\n          value: anger,\n          onChange: e => setAnger(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"sadness\",\n          children: \"Sadness Control (1-10):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"sadness\",\n          min: \"1\",\n          max: \"10\",\n          value: sadness,\n          onChange: e => setSadness(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"happiness\",\n          children: \"Happiness (1-10):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"happiness\",\n          min: \"1\",\n          max: \"10\",\n          value: happiness,\n          onChange: e => setHappiness(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodTracker, \"eHoD/T6S8ZJ4uzYOdwRsgHu7wNo=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","Navbar2","jsxDEV","_jsxDEV","MoodTracker","_s","profile","setProfile","anger","setAnger","sadness","setSadness","happiness","setHappiness","handleFormSubmit","event","preventDefault","moodTrack","date","Date","toLocaleDateString","parseInt","console","log","provideAdvice","advice","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","e","target","required","min","max","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 2/peerhealhaven/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Navbar2 from \"./NavBar2\";\r\nimport \"../css/MoodTracker.css\";\r\n\r\nfunction MoodTracker() {\r\n  const [profile, setProfile] = useState(\"\");\r\n  const [anger, setAnger] = useState(\"\");\r\n  const [sadness, setSadness] = useState(\"\");\r\n  const [happiness, setHappiness] = useState(\"\");\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Store mood tracks for the day\r\n    const moodTrack = {\r\n      date: new Date().toLocaleDateString(),\r\n      anger: parseInt(anger),\r\n      sadness: parseInt(sadness),\r\n      happiness: parseInt(happiness),\r\n    };\r\n\r\n    // You can implement logic to store the mood track data in a database or state management system\r\n    console.log(\"Mood tracked successfully!\", moodTrack);\r\n\r\n    // Reset form fields\r\n    setProfile(\"\");\r\n    setAnger(\"\");\r\n    setSadness(\"\");\r\n    setHappiness(\"\");\r\n  };\r\n\r\n  // Function to provide advice based on mood control capability\r\n  const provideAdvice = () => {\r\n    let advice = \"\";\r\n\r\n    if (parseInt(anger) > 7) {\r\n      advice +=\r\n        \"You seem to have high levels of anger. Try practicing deep breathing exercises or meditation to manage it.\\n\";\r\n    }\r\n    if (parseInt(sadness) > 7) {\r\n      advice +=\r\n        \"Feeling sad? Consider talking to someone you trust or engaging in activities that bring you joy.\\n\";\r\n    }\r\n    if (parseInt(happiness) < 5) {\r\n      advice +=\r\n        \"If you're struggling to find happiness, try focusing on things you're grateful for and doing activities you enjoy.\\n\";\r\n    }\r\n\r\n    if (advice === \"\") {\r\n      advice = \"Keep up the good work! You're doing great!\";\r\n    } else {\r\n      advice += \"Remember, it's okay to seek help if you need it.\";\r\n    }\r\n\r\n    alert(advice);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar2 />\r\n      <h2>Mood Tracker</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div>\r\n          <label htmlFor=\"profile\">Profile Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"profile\"\r\n            value={profile}\r\n            onChange={(e) => setProfile(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"anger\">Anger Control (1-10):</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"anger\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            value={anger}\r\n            onChange={(e) => setAnger(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"sadness\">Sadness Control (1-10):</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"sadness\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            value={sadness}\r\n            onChange={(e) => setSadness(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"happiness\">Happiness (1-10):</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"happiness\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            value={happiness}\r\n            onChange={(e) => setHappiness(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}