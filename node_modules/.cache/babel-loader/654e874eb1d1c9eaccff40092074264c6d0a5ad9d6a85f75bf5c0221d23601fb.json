{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhi\\\\OneDrive\\\\Documents\\\\Project 3\\\\checkmatecentral\\\\client\\\\src\\\\components\\\\chessbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBot = () => {\n  _s();\n  const [fen, setFen] = useState(\"start\");\n  const [gameOver, setGameOver] = useState(false);\n  const makeMove = async () => {\n    try {\n      const response = await fetch(\"/getBestMove\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fen\n        })\n      });\n      const data = await response.json();\n      const bestMove = data.bestMove;\n\n      // Apply the best move to the board\n      setFen(prevFen => {\n        // Modify the fen string to include the best move\n        return `${prevFen} ${bestMove}`;\n      });\n      if (gameOver) {\n        setGameOver(false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching best move:\", error);\n    }\n  };\n  const handleMove = move => {\n    // Prevent moves if the game is over\n    if (gameOver) {\n      return;\n    }\n\n    // Update the board with the player's move\n    setFen(move.fen);\n\n    // Check if the game is over\n    if (move.game_over) {\n      setGameOver(true);\n    } else {\n      // Make the bot's move after the player's move\n      makeMove();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: (source, target) => handleMove({\n        fen,\n        game_over: false,\n        // Assume the game is not over after player's move\n        move: `${source}-${target}`\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBot, \"T413vf5WC0SPPh0HGkOZ/LzD/xI=\");\n_c = ChessBot;\nexport default ChessBot;\nvar _c;\n$RefreshReg$(_c, \"ChessBot\");","map":{"version":3,"names":["React","useState","Chessboard","jsxDEV","_jsxDEV","ChessBot","_s","fen","setFen","gameOver","setGameOver","makeMove","response","fetch","method","headers","body","JSON","stringify","data","json","bestMove","prevFen","error","console","handleMove","move","game_over","children","fileName","_jsxFileName","lineNumber","columnNumber","position","onDrop","source","target","_c","$RefreshReg$"],"sources":["C:/Users/subhi/OneDrive/Documents/Project 3/checkmatecentral/client/src/components/chessbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\n\r\nconst ChessBot = () => {\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const makeMove = async () => {\r\n    try {\r\n      const response = await fetch(\"/getBestMove\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ fen }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const bestMove = data.bestMove;\r\n\r\n      // Apply the best move to the board\r\n      setFen((prevFen) => {\r\n        // Modify the fen string to include the best move\r\n        return `${prevFen} ${bestMove}`;\r\n      });\r\n\r\n      if (gameOver) {\r\n        setGameOver(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching best move:\", error);\r\n    }\r\n  };\r\n\r\n  const handleMove = (move) => {\r\n    // Prevent moves if the game is over\r\n    if (gameOver) {\r\n      return;\r\n    }\r\n\r\n    // Update the board with the player's move\r\n    setFen(move.fen);\r\n\r\n    // Check if the game is over\r\n    if (move.game_over) {\r\n      setGameOver(true);\r\n    } else {\r\n      // Make the bot's move after the player's move\r\n      makeMove();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Chess Bot</h1>\r\n      <Chessboard\r\n        position={fen}\r\n        onDrop={(source, target) =>\r\n          handleMove({\r\n            fen,\r\n            game_over: false, // Assume the game is not over after player's move\r\n            move: `${source}-${target}`,\r\n          })\r\n        }\r\n      />\r\n      {gameOver && <p>Game Over</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,OAAO,CAAC;EACvC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,EAAE;QAC3CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX;QAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,MAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,MAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;;MAE9B;MACAb,MAAM,CAAEc,OAAO,IAAK;QAClB;QACA,OAAQ,GAAEA,OAAQ,IAAGD,QAAS,EAAC;MACjC,CAAC,CAAC;MAEF,IAAIZ,QAAQ,EAAE;QACZC,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,UAAU,GAAIC,IAAI,IAAK;IAC3B;IACA,IAAIjB,QAAQ,EAAE;MACZ;IACF;;IAEA;IACAD,MAAM,CAACkB,IAAI,CAACnB,GAAG,CAAC;;IAEhB;IACA,IAAImB,IAAI,CAACC,SAAS,EAAE;MAClBjB,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,MAAM;MACL;MACAC,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC;EAED,oBACEP,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB5B,OAAA,CAACF,UAAU;MACT+B,QAAQ,EAAE1B,GAAI;MACd2B,MAAM,EAAEA,CAACC,MAAM,EAAEC,MAAM,KACrBX,UAAU,CAAC;QACTlB,GAAG;QACHoB,SAAS,EAAE,KAAK;QAAE;QAClBD,IAAI,EAAG,GAAES,MAAO,IAAGC,MAAO;MAC5B,CAAC;IACF;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EACDvB,QAAQ,iBAAIL,OAAA;MAAAwB,QAAA,EAAG;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAjEID,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAmEd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}